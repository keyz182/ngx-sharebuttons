{"version":3,"file":"ngx-sharebuttons.js","sources":["../tmp/classes/facebook.class.ts","../tmp/classes/twitter.class.ts","../tmp/classes/linkedin.class.ts","../tmp/classes/tumblr.class.ts","../tmp/classes/whatsapp.class.ts","../tmp/classes/pinterest.class.ts","../tmp/classes/reddit.class.ts","../tmp/classes/google.class.ts","../tmp/classes/stumble.class.ts","../tmp/classes/telegram.class.ts","../tmp/classes/email.class.ts","../tmp/classes/copy.class.ts","../tmp/classes/print.class.ts","../tmp/classes/vk.class.ts","../tmp/classes/index.ts","../tmp/modules/tokens.ts","../tmp/services/share-buttons.service.ts","../tmp/services/universal-support.service.ts","../tmp/directives/share-button.directive.ts","../tmp/pipes/n-formatter.pipe.ts","../tmp/modules/share-directive.module.ts","../tmp/components/share-button/share-button.component.ts","../tmp/modules/share-button.module.ts","../tmp/components/share-buttons/share-buttons.component.ts","../tmp/modules/share-buttons.module.ts","../tmp/ngx-sharebuttons.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport {IShareButton, ShareButtonArgs, ShareButtonProp} from '../models/share-buttons.models';\nexport class FacebookButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n    let /** @type {?} */ shareUrl =  this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&quote=' + args.title;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.get<ICount>(this.prop.countUrl + url)\n      .filter(res => !!(res.share && res.share.share_count))\n      .map(res => +res.share.share_count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction FacebookButton_tsickle_Closure_declarations() {\n/** @type {?} */\nFacebookButton.prototype.prop;\n/** @type {?} */\nFacebookButton.prototype.http;\n}\n\n\n/** Facebook Count interface */\n\ninterface Share {\n  comment_count: number;\n  share_count: number;\n}\n\ninterface OgObject {\n  id: string;\n  description: string;\n  title: string;\n  type: string;\n  updated_time: Date;\n}\n\ninterface ICount {\n  share: Share;\n  og_object: OgObject;\n  id: string;\n}\n","/** TWITTER DOCS: https://dev.twitter.com/web/tweet-button/web-intent */\n\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class TwitterButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&text=' + args.description;\n    }\n\n    if (args.via) {\n      shareUrl += '&via=' + args.via;\n    }\n\n    if (args.tags) {\n      shareUrl += '&hashtags=' + args.tags;\n    }\n\n    return shareUrl;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction TwitterButton_tsickle_Closure_declarations() {\n/** @type {?} */\nTwitterButton.prototype.prop;\n}\n\n","/** LINKEDIN DOCS https://developer.linkedin.com/docs/share-on-linkedin#! */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class LinkedinButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&title=' + args.title;\n    }\n    if (args.description) {\n      shareUrl += '&summary=' + args.description;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.jsonp<ICount>(this.prop.countUrl + url, 'callback')\n      .filter(res => !!res.count)\n      .map(res => +res.count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction LinkedinButton_tsickle_Closure_declarations() {\n/** @type {?} */\nLinkedinButton.prototype.prop;\n/** @type {?} */\nLinkedinButton.prototype.http;\n}\n\n\n/** LinkedIn count interface */\n\nexport interface ICount {\n  count: number;\n  fCnt: string;\n  fCntPlusOne: string;\n  url: string;\n}\n","/** TUMBLR DOCS: https://www.tumblr.com/docs/en/share_button */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class TumblrButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&caption=' + args.description;\n    }\n\n    if (args.tags) {\n      shareUrl += '&tags=' + args.tags;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.jsonp<ICount>(this.prop.countUrl + url, 'callback')\n      .filter(res => !!(res.response && res.response.note_count))\n      .map(res => +res.response.note_count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction TumblrButton_tsickle_Closure_declarations() {\n/** @type {?} */\nTumblrButton.prototype.prop;\n/** @type {?} */\nTumblrButton.prototype.http;\n}\n\n\n/** Tumblr count interface*/\n\ninterface Meta {\n  status: number;\n  msg: string;\n}\n\ninterface Response {\n  url: string;\n  note_count: number;\n}\n\ninterface ICount {\n  meta: Meta;\n  response: Response;\n}\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class WhatsappButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl;\n\n    if (args.description) {\n      shareUrl += args.description + ' %0A';\n    }\n\n    return shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction WhatsappButton_tsickle_Closure_declarations() {\n/** @type {?} */\nWhatsappButton.prototype.prop;\n}\n\n","import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class PinterestButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    /** The description and the image are required to get the pin button to work. */\n\n    if (args.description) {\n      shareUrl += '&description=' + args.description;\n    } else if (document) {\n/**\n * If user didn't add description, get it from the OG meta tag\n */\nconst ogDescription: Element = document.querySelector('meta[property=\"og:description\"]');\n      if (ogDescription) {\n        shareUrl += '&description=' + ogDescription.getAttribute('content');\n      } else {\n        console.warn('[ShareButtons]: You didn\\'t set the description text for Pinterest button');\n      }\n    }\n\n    if (args.image) {\n      shareUrl += '&media=' + args.image;\n    } else if (document) {\n      const /** @type {?} */ ogImage: Element = document.querySelector('meta[property=\"og:image\"]');\n      if (ogImage) {\n        shareUrl += '&media=' + ogImage.getAttribute('content');\n      } else {\n        console.warn('[ShareButtons]: You didn\\'t set the image URL for Pinterest button');\n      }\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.get(this.prop.countUrl + url, {responseType: 'text'})\n      .map(text => /** @type {?} */(( <ICount>JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1')))))\n      .filter(res => !!res.count)\n      .map(res => +res.count)\n      .catch(err => Observable.empty());\n  }\n\n}\n\nfunction PinterestButton_tsickle_Closure_declarations() {\n/** @type {?} */\nPinterestButton.prototype.prop;\n/** @type {?} */\nPinterestButton.prototype.http;\n}\n\n\n/** Pinterest count interface */\n\ninterface ICount {\n  url: string;\n  count: number;\n}\n","/** REDDIT DOCS: http://stackoverflow.com/questions/24823114/post-to-reddit-via-url */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class RedditButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&title=' + args.title;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.get<ICount>(this.prop.countUrl + url)\n      .filter(res => !!(res.data && res.data.children && res.data.children.length))\n      .map(res => +res.data.children[0].data.score)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction RedditButton_tsickle_Closure_declarations() {\n/** @type {?} */\nRedditButton.prototype.prop;\n/** @type {?} */\nRedditButton.prototype.http;\n}\n\n\n\n/** Reddit count interface */\n\ninterface Source {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface Resolution {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface Image {\n  source: Source;\n  resolutions: Resolution[];\n  id: string;\n}\n\ninterface Preview {\n  images: Image[];\n  enabled: boolean;\n}\n\ninterface Data2 {\n  domain: string;\n  approved_at_utc?: any;\n  banned_by?: any;\n  thumbnail_width: number;\n  subreddit: string;\n  selftext_html?: any;\n  selftext: string;\n  likes?: any;\n  suggested_sort?: any;\n  user_reports: any[];\n  secure_media?: any;\n  link_flair_text?: any;\n  id: string;\n  banned_at_utc?: any;\n  view_count?: any;\n  archived: boolean;\n  clicked: boolean;\n  report_reasons?: any;\n  title: string;\n  media?: any;\n  mod_reports: any[];\n  can_mod_post: boolean;\n  author_flair_text?: any;\n  score: number;\n  approved_by?: any;\n  over_18: boolean;\n  hidden: boolean;\n  preview: Preview;\n  thumbnail: string;\n  subreddit_id: string;\n  edited: boolean;\n  link_flair_css_class?: any;\n  author_flair_css_class?: any;\n  contest_mode: boolean;\n  gilded: number;\n  downs: number;\n  brand_safe: boolean;\n  saved: boolean;\n  removal_reason?: any;\n  post_hint: string;\n  stickied: boolean;\n  can_gild: boolean;\n  thumbnail_height: number;\n  parent_whitelist_status?: any;\n  name: string;\n  spoiler: boolean;\n  permalink: string;\n  subreddit_type: string;\n  locked: boolean;\n  hide_score: boolean;\n  created: number;\n  url: string;\n  whitelist_status?: any;\n  quarantine: boolean;\n  author: string;\n  created_utc: number;\n  subreddit_name_prefixed: string;\n  ups: number;\n  num_comments: number;\n  is_self: boolean;\n  visited: boolean;\n  num_reports?: any;\n  is_video: boolean;\n  distinguished?: any;\n}\n\ninterface Child {\n  kind: string;\n  data: Data2;\n}\n\ninterface Data {\n  modhash: string;\n  children: Child[];\n  after?: any;\n  before?: any;\n}\n\ninterface ICount {\n  kind: string;\n  data: Data;\n}\n","/** GPLUS DOCS: https://developers.google.com/+/web/share/#sharelink */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\nexport class GoogleButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nlink(url: string) {\n    return this.prop.shareUrl + url;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return Observable.empty();\n  }\n}\n\nfunction GoogleButton_tsickle_Closure_declarations() {\n/** @type {?} */\nGoogleButton.prototype.prop;\n/** @type {?} */\nGoogleButton.prototype.http;\n}\n\n","/** STUMBLE DOCS: http://stackoverflow.com/questions/10591424/how-can-i-create-a-custom-stumbleupon-button */\n\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class StumbleButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nlink(url: string) {\n\n    return this.prop.shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n}\n\nfunction StumbleButton_tsickle_Closure_declarations() {\n/** @type {?} */\nStumbleButton.prototype.prop;\n}\n\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class TelegramButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&text=' + args.description;\n    }\n\n    return shareUrl;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction TelegramButton_tsickle_Closure_declarations() {\n/** @type {?} */\nTelegramButton.prototype.prop;\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/Observable';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class EmailButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + args.email;\n\n    if (args.title) {\n      shareUrl += '&subject=' + args.title;\n    }\n\n    shareUrl += '&body=';\n    if (args.description) {\n      shareUrl += args.description + ' %0A';\n    }\n\n    return shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction EmailButton_tsickle_Closure_declarations() {\n/** @type {?} */\nEmailButton.prototype.prop;\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { ShareButtonDirective } from '../directives/share-button.directive';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/delay';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class CopyButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n    this.copyURLToClipboard(url, args.directive);\n    return null;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n/**\n * copy URL to clipboard\n * @param {?} url\n * @param {?} directive\n * @return {?}\n */\ncopyURLToClipboard(url: string, directive: ShareButtonDirective) {\n\n    const /** @type {?} */ temp = {text: directive.shareButton.prop.text, icon: directive.shareButton.prop.icon};\n    Observable.of({}).take(1).do(() => {\n        url = decodeURIComponent(url);\n        const /** @type {?} */ textArea = directive.renderer.createElement('textarea');\n\n        // Place in top-left corner of screen regardless of scroll position.\n        directive.renderer.setStyle(textArea, 'position', 'fixed');\n        directive.renderer.setStyle(textArea, 'top', 0);\n        directive.renderer.setStyle(textArea, 'left', 0);\n\n        // Ensure it has a small width and height. Setting to 1px / 1em\n        // doesn't work as directive gives a negative w/h on some browsers.\n        directive.renderer.setStyle(textArea, 'width', '2em');\n        directive.renderer.setStyle(textArea, 'height', '2em');\n\n        // We don't need padding, reducing the size if it does flash render\n        directive.renderer.setStyle(textArea, 'padding', 0);\n\n        // Clean up any borders.\n        directive.renderer.setStyle(textArea, 'border', 'none');\n        directive.renderer.setStyle(textArea, 'outline', 'none');\n        directive.renderer.setStyle(textArea, 'boxShadow', 'none');\n\n        // Avoid flash of white box if rendered for any reason.\n        directive.renderer.setStyle(textArea, 'background', 'transparent');\n        directive.renderer.setProperty(textArea, 'value', url);\n        directive.renderer.appendChild(directive.el, textArea);\n\n        textArea.select();\n\n        document.execCommand('copy');\n\n        directive.renderer.removeChild(directive.el, textArea);\n\n        directive.shareButton.prop.text = this.prop.successText;\n        directive.shareButton.prop.icon = this.prop.successIcon;\n        directive.cd.markForCheck();\n      },\n      () => {\n        directive.shareButton.prop.text = this.prop.failText;\n        directive.shareButton.prop.icon = this.prop.failIcon;\n        directive.cd.markForCheck();\n        console.warn('[ShareButtons]: Print button could not copy URL to clipboard');\n      })\n      .delay(2000)\n      .do(() => {\n        directive.shareButton.prop.text = temp.text;\n        directive.shareButton.prop.icon = temp.icon;\n        directive.cd.markForCheck();\n      })\n      .subscribe();\n\n  }\n\n}\n\nfunction CopyButton_tsickle_Closure_declarations() {\n/** @type {?} */\nCopyButton.prototype.prop;\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class PrintButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    args.directive.window.print();\n    return null;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction PrintButton_tsickle_Closure_declarations() {\n/** @type {?} */\nPrintButton.prototype.prop;\n}\n\n","/** VK DOCS: https://vk.com/dev/widget_share */\n\n\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class VKontakteButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n    return this.prop.shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n    return Observable.empty();\n  }\n\n}\n\nfunction VKontakteButton_tsickle_Closure_declarations() {\n/** @type {?} */\nVKontakteButton.prototype.prop;\n}\n\n","export {FacebookButton} from './facebook.class';\nexport {TwitterButton} from './twitter.class';\nexport {LinkedinButton,ICount} from './linkedin.class';\nexport {TumblrButton} from './tumblr.class';\nexport {WhatsappButton} from './whatsapp.class';\nexport {PinterestButton} from './pinterest.class';\nexport {RedditButton} from './reddit.class';\nexport {GoogleButton} from './google.class';\nexport {StumbleButton} from './stumble.class';\nexport {TelegramButton} from './telegram.class';\nexport {EmailButton} from './email.class';\nexport {CopyButton} from './copy.class';\nexport {PrintButton} from './print.class';\nexport {VKontakteButton} from './vk.class';\n\nexport const /** @type {?} */ Buttons = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    icon: 'fa fa-facebook',\n    color: '#3b5998',\n    supportCount: true,\n    shareUrl: 'https://www.facebook.com/sharer/sharer.php?u=',\n    androidUrl: 'com.facebook.katana',\n    iosUrl: 'fb://',\n    countUrl: 'https://graph.facebook.com?id='\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    icon: 'fa fa-twitter',\n    color: '#00acee',\n    supportCount: false,\n    shareUrl: 'https://twitter.com/intent/tweet?url=',\n    androidUrl: 'com.twitter.package',\n    iosUrl: 'twitter://tweet?url='\n  },\n  google: {\n    type: 'google',\n    text: 'Google+',\n    icon: 'fa fa-google-plus',\n    color: '#DB4437',\n    supportCount: false,\n    shareUrl: 'https://plus.google.com/share?url=',\n    androidUrl: '',\n    iosUrl: '',\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    icon: 'fa fa-linkedin',\n    color: '#006fa6',\n    supportCount: true,\n    shareUrl: 'http://www.linkedin.com/shareArticle?url=',\n    androidUrl: 'com.linkedin.android',\n    iosUrl: 'linkedin://',\n    countUrl: 'https://www.linkedin.com/countserv/count/share?url='\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    icon: 'fa fa-pinterest-p',\n    color: '#BD091D',\n    supportCount: true,\n    shareUrl: 'https://in.pinterest.com/pin/create/button/?url=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://api.pinterest.com/v1/urls/count.json?callback=receiveCount&url='\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    icon: 'fa fa-reddit-alien',\n    color: '#FF4006',\n    supportCount: true,\n    shareUrl: 'http://www.reddit.com/submit?url=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://buttons.reddit.com/button_info.json?url='\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    icon: 'fa fa-tumblr',\n    color: '#36465D',\n    supportCount: true,\n    shareUrl: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://api.tumblr.com/v2/share/stats?url='\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    icon: 'fa fa-print',\n    color: 'brown',\n    supportCount: false\n  },\n  stumble: {\n    type: 'stumble',\n    text: 'Stumble',\n    icon: 'fa fa-stumbleupon',\n    color: '#eb4924',\n    supportCount: false,\n    shareUrl: 'http://www.stumbleupon.com/submit?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    icon: 'fa fa-send',\n    color: '#0088cc',\n    supportCount: false,\n    shareUrl: 'https://t.me/share/url?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    icon: 'fa fa-vk',\n    color: '#4C75A3',\n    supportCount: false,\n    shareUrl: 'http://vk.com/share.php?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    successText: 'Copied',\n    successIcon: 'fa fa-check',\n    failText: 'Error',\n    failIcon: 'fa fa-exclamation',\n    icon: 'fa fa-link',\n    color: '#607D8B',\n    supportCount: false\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    icon: 'fa fa-whatsapp',\n    color: '#25D366',\n    supportCount: false,\n    shareUrl: 'https://web.whatsapp.com/send?text=',\n    androidUrl: 'com.whatsapp.package',\n    iosUrl: 'whatsapp://?text='\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    icon: 'fa fa-envelope',\n    color: '#32A1A3',\n    supportCount: false,\n    shareUrl: 'mailto:?'\n  }\n};\n","import { InjectionToken } from '@angular/core';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\n\nexport const /** @type {?} */ OPTIONS = new InjectionToken<ShareButtonsOptions>('OPTIONS');\nexport const /** @type {?} */ BUTTONS_META = new InjectionToken<ShareButtonsMeta>('BUTTONS_META');\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport {\n  FacebookButton,\n  TwitterButton,\n  GoogleButton,\n  PinterestButton,\n  TumblrButton,\n  EmailButton,\n  PrintButton,\n  LinkedinButton,\n  VKontakteButton,\n  StumbleButton,\n  RedditButton,\n  WhatsappButton,\n  TelegramButton,\n  CopyButton,\n  Buttons\n} from '../classes/index';\nimport { BUTTONS_META, OPTIONS } from '../modules/tokens';\nexport class ShareButtonsService {\n/**\n * All buttons\n */\nallButtons = [\n    'facebook',\n    'twitter',\n    'linkedin',\n    'pinterest',\n    'google',\n    'stumble',\n    'reddit',\n    'whatsapp',\n    'tumblr',\n    'vk',\n    'telegram',\n    'email',\n    'copy',\n    'print'\n  ];\n/**\n * Default options\n */\noptions: ShareButtonsOptions = {\n    theme: 'default',\n    dialogWidth: 500,\n    dialogHeight: 400,\n    include: this.allButtons,\n    exclude: [],\n    size: 0,\n    title: null,\n    image: null,\n    description: null,\n    tags: null,\n    gaTracking: false,\n    twitterAccount: null\n  };\n/**\n * Button's meta data such as icon,color and text of each button\n */\nmeta: ShareButtonsMeta = Buttons;\n/**\n * @param {?} http\n * @param {?} options\n * @param {?} meta\n */\nconstructor(private http: HttpClient,\n     options: ShareButtonsOptions,\n     meta: ShareButtonsMeta) {\n\n    /** Override global options with user's preference */\n    this.options = mergeDeep(this.options, options);\n    this.meta = mergeDeep(this.meta, meta);\n  }\n/**\n * @return {?}\n */\nget twitterAccount() {\n    return this.options.twitterAccount;\n  }\n/**\n * @return {?}\n */\nget dialogSize() {\n    return `width=${this.options.dialogWidth}, height=${this.options.dialogHeight}`;\n  }\n/**\n * Get all wanted buttons\n * @return {?}\n */\nget buttons() {\n    if (!this.options.exclude.length) {\n      return this.options.include;\n    }\n    return this.options.include.filter((btn) => this.options.exclude.indexOf(btn) < 0);\n  }\n/**\n * @return {?}\n */\nget theme() {\n    return this.options.theme;\n  }\n/**\n * Global meta tags\n * @return {?}\n */\nget title() {\n    return this.options.title;\n  }\n/**\n * @return {?}\n */\nget description() {\n    return this.options.description;\n  }\n/**\n * @return {?}\n */\nget image() {\n    return this.options.image;\n  }\n/**\n * @return {?}\n */\nget tags() {\n    return this.options.tags;\n  }\n/**\n * @return {?}\n */\nget gaTracking() {\n    return this.options.gaTracking;\n  }\n/**\n * @return {?}\n */\nget size() {\n    return this.options.size;\n  }\n/**\n * @param {?} buttonName\n * @return {?}\n */\ncreateShareButton(buttonName: string) {\n\n    switch (buttonName.toLowerCase()) {\n      case this.meta.facebook.type:\n        return new FacebookButton(this.meta.facebook, this.http);\n      case this.meta.twitter.type:\n        return new TwitterButton(this.meta.twitter);\n      case this.meta.google.type:\n        return new GoogleButton(this.meta.google, this.http);\n      case this.meta.pinterest.type:\n        return new PinterestButton(this.meta.pinterest, this.http);\n      case this.meta.linkedin.type:\n        return new LinkedinButton(this.meta.linkedin, this.http);\n      case this.meta.reddit.type:\n        return new RedditButton(this.meta.reddit, this.http);\n      case this.meta.tumblr.type:\n        return new TumblrButton(this.meta.tumblr, this.http);\n      case this.meta.stumble.type:\n        return new StumbleButton(this.meta.stumble);\n      case this.meta.whatsapp.type:\n        return new WhatsappButton(this.meta.whatsapp);\n      case this.meta.vk.type:\n        return new VKontakteButton(this.meta.vk);\n      case this.meta.telegram.type:\n        return new TelegramButton(this.meta.telegram);\n      case this.meta.email.type:\n        return new EmailButton(this.meta.email);\n      case this.meta.copy.type:\n        return new CopyButton(this.meta.copy);\n      case this.meta.print.type:\n        return new PrintButton(this.meta.print);\n      default:\n        return null;\n    }\n  }\n/**\n * Determine the mobile operating system.\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\n * \n * @return {?}\n */\ngetMobileOS() {\n    // const userAgent = navigator.userAgent || navigator.vendor || (window || global).opera;\n\n    // Windows Phone must come first because its UA also contains \"Android\"\n    // if (/windows phone/i.test(userAgent)) {\n    //   return 'WindowsPhone';\n    // }\n\n    // if (/android/i.test(userAgent)) {\n    //   return 'Android';\n    // }\n\n    // iOS detection from: http://stackoverflow.com/a/9039885/177710\n    // if (/iPad|iPhone|iPod/.test(userAgent) && !(window || global).MSStream) {\n    //   return 'iOS';\n    // }\n\n    return undefined;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: undefined, decorators: [{ type: Inject, args: [OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [BUTTONS_META, ] }, ]},\n];\n}\n\nfunction ShareButtonsService_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonsService.ctorParameters;\n/**\n * All buttons\n * @type {?}\n */\nShareButtonsService.prototype.allButtons;\n/**\n * Default options\n * @type {?}\n */\nShareButtonsService.prototype.options;\n/**\n * Button's meta data such as icon,color and text of each button\n * @type {?}\n */\nShareButtonsService.prototype.meta;\n/** @type {?} */\nShareButtonsService.prototype.http;\n}\n\n/**\n * Simple object check.\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * Deep merge two objects.\n * @param {?} target\n * @param {...?} sources\n * @return {?}\n */\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const /** @type {?} */ source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const /** @type {?} */ key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\n\ndeclare const global: any;\ndeclare const window: any;\nexport class UniversalSupportService {\n/**\n * @return {?}\n */\nget nativeWindow() {\n        try {\n            return window;\n        } catch ( /** @type {?} */e) {\n          return global;\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniversalSupportService_tsickle_Closure_declarations() {\n/** @type {?} */\nUniversalSupportService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniversalSupportService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  ElementRef,\n  Renderer2,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { IShareButton } from '../models/share-buttons.models';\nimport { UniversalSupportService } from '../services/universal-support.service';\n\n/** Google analytics ref */\ndeclare const ga: Function;\nexport class ShareButtonDirective {\n/**\n * Window ref that supports Universal\n */\nwindow: Window;\n/**\n * Element ref\n */\nel: HTMLElement;\n/**\n * Share button type\n */\nshareButton: IShareButton;\n/**\n * Validated share URL\n */\nurl: string;\n/**\n * Share meta tags\n */\nsbTitle = this.share.title;\n   sbDescription = this.share.description;\n   sbImage = this.share.image;\n   sbTags = this.share.tags;\n/**\n * Set button class, e.g. 'sb-facebook'\n */\nbuttonClass: string;\n/**\n * Set share button e.g facebook, twitter...etc\n * @param {?} buttonName\n * @return {?}\n */\nset createButton(buttonName: string) {\n/**\n * Create a new button of type <buttonName>\n */\nconst button = this.share.createShareButton(buttonName);\n\n    if (button) {\n      this.shareButton = button;\n\n      /** Remove old button class in case user changed the button */\n      this.renderer.removeClass(this.el, 'sb-' + this.buttonClass);\n\n      /** Add new button class e.g.: sb-facebook, sb-twitter ...etc */\n      this.renderer.addClass(this.el, 'sb-' + button.prop.type);\n\n      /** Keep a copy of current class */\n      this.buttonClass = button.prop.type;\n\n      /** Get link's shared count */\n      this.getCount();\n    } else {\n      throw new Error(`[ShareButtons]: The share button \"${buttonName}\" does not exist. Make sure the button name is correct!`);\n    }\n  }\n/**\n * Set share URL\n * @param {?} url\n * @return {?}\n */\nset sbUrl(url: string) {\n\n    /** Check if current URL equals previous URL */\n    if (url !== this.url) {\n      this.url = this.validateUrl(url);\n      this.getCount();\n    }\n  }\n/**\n * Google analytics tracking\n */\ngaTracking = this.share.gaTracking;\n/**\n * Share count event\n */\nsbCount = new EventEmitter<number>();\n/**\n * Share dialog opened event\n */\nsbOpened = new EventEmitter<string>();\n/**\n * Share dialog closed event\n */\nsbClosed = new EventEmitter<string>();\n/**\n * @param {?} share\n * @param {?} renderer\n * @param {?} cd\n * @param {?} el\n * @param {?} universal\n */\nconstructor(private share: ShareButtonsService,\npublic renderer: Renderer2,\npublic cd: ChangeDetectorRef,\n    el: ElementRef,\n    universal: UniversalSupportService) {\n    this.el = el.nativeElement;\n    this.window = universal.nativeWindow;\n  }\n/**\n * Open share dialog\n * @return {?}\n */\nonClick() {\n    /** Set user did not set the url using [sbUrl], use window URL */\n    if (!this.url) {\n      this.url = encodeURIComponent(this.window.location.href);\n    }\n/**\n * Get sharing link\n */\nconst shareUrl = this.shareButton.link(this.url, {\n      title: this.sbTitle,\n      description: this.sbDescription,\n      image: this.sbImage,\n      tags: this.sbTags,\n      mobile: this.share.getMobileOS(),\n      via: this.share.twitterAccount,\n      directive: this\n    });\n\n    /** GA tracking */\n    if (this.gaTracking && typeof ga !== 'undefined') {\n      ga('send', 'social', this.shareButton.prop.type, 'click', this.url);\n    }\n\n    let /** @type {?} */ popUp;\n    if (shareUrl) {\n      /** Open share dialog */\n      popUp = this.window.open(shareUrl, 'newwindow', this.share.dialogSize);\n    }\n\n    /** Emit opened dialog type */\n    this.sbOpened.emit(this.shareButton.prop.type);\n\n    /** If dialog closed event has subscribers, emit closed dialog type */\n    if (this.sbClosed.observers.length && popUp) {\n      const /** @type {?} */ pollTimer = this.window.setInterval(() => {\n        if (popUp.closed) {\n          this.window.clearInterval(pollTimer);\n          this.sbClosed.emit(this.shareButton.prop.type);\n        }\n      }, 200);\n    }\n\n  }\n/**\n * @return {?}\n */\ngetCount() {\n    /** Only if share count has observers & the button has support for share count */\n    if (this.url && this.sbCount.observers.length && this.shareButton.prop.supportCount) {\n\n      /** Emit share count to (sbCount) Output */\n      this.shareButton.count(this.url).subscribe((count: number) => this.sbCount.emit(count));\n    }\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nvalidateUrl(url: string) {\n    /** Use encodeURIComponent to let URLs with the hash location strategy to work in tweets */\n\n    if (url) {\n      const /** @type {?} */ r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n      if (r.test(url)) {\n        return encodeURIComponent(url);\n      }\n      console.warn(`[ShareButtons]: The share URL \"${url}\" is invalid!`);\n    }\n    /** fallback to current page URL */\n    return encodeURIComponent(this.window.location.href);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[shareButton]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ShareButtonsService, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: UniversalSupportService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'sbTitle': [{ type: Input },],\n'sbDescription': [{ type: Input },],\n'sbImage': [{ type: Input },],\n'sbTags': [{ type: Input },],\n'createButton': [{ type: Input, args: ['shareButton', ] },],\n'sbUrl': [{ type: Input },],\n'gaTracking': [{ type: Input },],\n'sbCount': [{ type: Output },],\n'sbOpened': [{ type: Output },],\n'sbClosed': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\nfunction ShareButtonDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonDirective.ctorParameters;\n/** @type {?} */\nShareButtonDirective.propDecorators;\n/**\n * Window ref that supports Universal\n * @type {?}\n */\nShareButtonDirective.prototype.window;\n/**\n * Element ref\n * @type {?}\n */\nShareButtonDirective.prototype.el;\n/**\n * Share button type\n * @type {?}\n */\nShareButtonDirective.prototype.shareButton;\n/**\n * Validated share URL\n * @type {?}\n */\nShareButtonDirective.prototype.url;\n/**\n * Share meta tags\n * @type {?}\n */\nShareButtonDirective.prototype.sbTitle;\n/** @type {?} */\nShareButtonDirective.prototype.sbDescription;\n/** @type {?} */\nShareButtonDirective.prototype.sbImage;\n/** @type {?} */\nShareButtonDirective.prototype.sbTags;\n/**\n * Set button class, e.g. 'sb-facebook'\n * @type {?}\n */\nShareButtonDirective.prototype.buttonClass;\n/**\n * Google analytics tracking\n * @type {?}\n */\nShareButtonDirective.prototype.gaTracking;\n/**\n * Share count event\n * @type {?}\n */\nShareButtonDirective.prototype.sbCount;\n/**\n * Share dialog opened event\n * @type {?}\n */\nShareButtonDirective.prototype.sbOpened;\n/**\n * Share dialog closed event\n * @type {?}\n */\nShareButtonDirective.prototype.sbClosed;\n/** @type {?} */\nShareButtonDirective.prototype.share;\n/** @type {?} */\nShareButtonDirective.prototype.renderer;\n/** @type {?} */\nShareButtonDirective.prototype.cd;\n}\n\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nexport class NFormatterPipe implements PipeTransform {\n/**\n * @param {?} num\n * @param {?=} digits\n * @return {?}\n */\ntransform(num: any, digits?: any): any {\n\n    if (typeof num !== 'number') {\n      num = 1;\n    }\n\n    return nFormatter(num, digits);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'nFormatter'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NFormatterPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nNFormatterPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNFormatterPipe.ctorParameters;\n}\n\n/**\n * Change share counts to a readable number e.g 35.6k\n */\nexport const nFormatter = (num: number, digits: number) => {\n\n  const si = [\n    {value: 1E18, symbol: 'E'},\n    {value: 1E15, symbol: 'P'},\n    {value: 1E12, symbol: 'T'},\n    {value: 1E9, symbol: 'G'},\n    {value: 1E6, symbol: 'M'},\n    {value: 1E3, symbol: 'K'}\n  ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n\n  for (let i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n    }\n  }\n  return num.toFixed(digits).replace(rx, '$1');\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonDirective } from '../directives/share-button.directive';\nimport { NFormatterPipe } from '../pipes/n-formatter.pipe';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { UniversalSupportService } from '../services/universal-support.service';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n/**\n * @param {?} httpClient\n * @param {?} options\n * @param {?} buttonsMeta\n * @return {?}\n */\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\nexport class ShareDirectiveModule {\n/**\n * @param {?=} options\n * @param {?=} buttonsMeta\n * @return {?}\n */\nstatic forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareDirectiveModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CommonModule,\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  providers: [ UniversalSupportService ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareDirectiveModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShareDirectiveModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareDirectiveModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  ViewChild,\n  ChangeDetectorRef,\n  ElementRef,\n  HostBinding\n} from '@angular/core';\n\nimport { ShareButtonDirective } from '../../directives/share-button.directive';\nimport { ShareButtonsService } from '../../services/share-buttons.service';\nexport class ShareButtonComponent implements OnDestroy {\n/**\n * Share URL\n */\nurl: string;\n/**\n * Share count value\n */\nshareCount: number;\n/**\n * Button name e.g. fb, twitter, reddit...etc\n */\nbutton: string;\n/**\n * @param {?} button\n * @return {?}\n */\nset createButton(button: string) {\n    this.shareCount = 0;\n    this.button = button;\n  }\n/**\n * on set share URL\n * @param {?} newUrl\n * @return {?}\n */\nset setUrl(newUrl: string) {\n    /** Reset share count when url changes */\n    this.shareCount = 0;\n    this.url = newUrl;\n  }\n/**\n * Share meta tags\n */\ntitle: string;\n   description: string;\n   image: string;\n   tags: string;\n/**\n * Show button icon\n */\nshowIcon = true;\n/**\n * Show button name\n */\nshowName = false;\n/**\n * Button size\n */\nsize = this.share.size;\n/**\n * Get and display share count\n */\nshowCount = false;\n/**\n * @param {?} show\n * @return {?}\n */\nset setShowCount(show: boolean) {\n    this.showCount = show;\n    /** Subscribe to count event */\n\n    /** Check if sbCount has observers already, don't subscribe again */\n    if (!this.shareDirective.sbCount.observers.length) {\n\n      /** Subscribe to the directive count's event only if 'show' is true or 'sbCount' has observers */\n      if (this.showCount || this.count.observers.length) {\n        this.shareDirective.sbCount.subscribe(count => {\n          this.shareCount = count;\n          this.count.emit(count);\n          this.cd.markForCheck();\n        });\n      }\n\n    }\n\n  }\n/**\n * Button theme\n * @param {?} theme\n * @return {?}\n */\nset setTheme(theme: string) {\n    this.buttonClass = 'sb-button sb-' + theme;\n  }\n/**\n * Set theme as button class\n */\nbuttonClass = 'sb-button sb-' + this.share.theme;\n/**\n * Share count event\n */\ncount = new EventEmitter<number>();\n/**\n * Share dialog opened event\n */\nopened = new EventEmitter<string>();\n/**\n * Share dialog closed event\n */\nclosed = new EventEmitter<string>();\n/**\n * Share directive ref\n */\nshareDirective: ShareButtonDirective;\n/**\n * <ng-content> wrapper, used to add class e.g. sb-default, sb-text, sb-count\n */\ntemplate: ElementRef;\n/**\n * @param {?} cd\n * @param {?} share\n */\nconstructor(private cd: ChangeDetectorRef,\nprivate share: ShareButtonsService) {\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.shareDirective.sbCount.complete();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'share-button',\n  template: `\n    <button class=\"sb-wrapper\"\n            [shareButton]=\"button\"\n            [sbUrl]=\"url\"\n            [sbImage]=\"image\"\n            [sbTitle]=\"title\"\n            [sbDescription]=\"description\"\n            [sbTags]=\"tags\"\n            (sbOpened)=\"opened.emit($event)\"\n            (sbClosed)=\"closed.emit($event)\"\n            [class.sb-show-count]=\"showCount && shareCount\"\n            [class.sb-show-template]=\"template.innerText?.length\"\n            [class.sb-show-text]=\"showName && !template.childElementCount\"\n            [class.sb-show-icon]=\"showIcon && !template.childElementCount\"\n            [style.fontSize.px]=\"(1 + size/20) * 14\">\n\n      <div class=\"sb-inner\">\n\n        <!-- HIDE BUTTON'S ICON AND TEXT IF CUSTOM TEMPLATE IS USED -->\n\n        <div class=\"sb-content\" *ngIf=\"!template.childElementCount\">\n\n          <!-- BUTTON ICON -->\n          <div *ngIf=\"showIcon\" class=\"sb-icon\">\n            <i [class]=\"shareDirective.shareButton.prop.icon\" aria-hidden=\"true\"></i>\n          </div>\n\n          <!-- BUTTON TEXT -->\n          <div *ngIf=\"showName\" class=\"sb-text\">\n            {{ shareDirective.shareButton.prop.text }}\n          </div>\n\n        </div>\n\n        <!-- FOR CUSTOM TEMPLATE -->\n        <div #template class=\"sb-template\">\n          <ng-content></ng-content>\n        </div>\n\n        <!-- BUTTON COUNT -->\n        <div *ngIf=\"showCount && shareCount\" class=\"sb-count\">\n          <span>{{ shareCount | nFormatter }}</span>\n        </div>\n\n      </div>\n    </button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ShareButtonsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'createButton': [{ type: Input, args: ['button', ] },],\n'setUrl': [{ type: Input, args: ['url', ] },],\n'title': [{ type: Input },],\n'description': [{ type: Input },],\n'image': [{ type: Input },],\n'tags': [{ type: Input },],\n'showIcon': [{ type: Input },],\n'showName': [{ type: Input },],\n'size': [{ type: Input },],\n'setShowCount': [{ type: Input, args: ['showCount', ] },],\n'setTheme': [{ type: Input, args: ['theme', ] },],\n'buttonClass': [{ type: HostBinding, args: ['class', ] },],\n'count': [{ type: Output },],\n'opened': [{ type: Output },],\n'closed': [{ type: Output },],\n'shareDirective': [{ type: ViewChild, args: [ShareButtonDirective, ] },],\n'template': [{ type: ViewChild, args: ['template', ] },],\n};\n}\n\nfunction ShareButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonComponent.ctorParameters;\n/** @type {?} */\nShareButtonComponent.propDecorators;\n/**\n * Share URL\n * @type {?}\n */\nShareButtonComponent.prototype.url;\n/**\n * Share count value\n * @type {?}\n */\nShareButtonComponent.prototype.shareCount;\n/**\n * Button name e.g. fb, twitter, reddit...etc\n * @type {?}\n */\nShareButtonComponent.prototype.button;\n/**\n * Share meta tags\n * @type {?}\n */\nShareButtonComponent.prototype.title;\n/** @type {?} */\nShareButtonComponent.prototype.description;\n/** @type {?} */\nShareButtonComponent.prototype.image;\n/** @type {?} */\nShareButtonComponent.prototype.tags;\n/**\n * Show button icon\n * @type {?}\n */\nShareButtonComponent.prototype.showIcon;\n/**\n * Show button name\n * @type {?}\n */\nShareButtonComponent.prototype.showName;\n/**\n * Button size\n * @type {?}\n */\nShareButtonComponent.prototype.size;\n/**\n * Get and display share count\n * @type {?}\n */\nShareButtonComponent.prototype.showCount;\n/**\n * Set theme as button class\n * @type {?}\n */\nShareButtonComponent.prototype.buttonClass;\n/**\n * Share count event\n * @type {?}\n */\nShareButtonComponent.prototype.count;\n/**\n * Share dialog opened event\n * @type {?}\n */\nShareButtonComponent.prototype.opened;\n/**\n * Share dialog closed event\n * @type {?}\n */\nShareButtonComponent.prototype.closed;\n/**\n * Share directive ref\n * @type {?}\n */\nShareButtonComponent.prototype.shareDirective;\n/**\n * <ng-content> wrapper, used to add class e.g. sb-default, sb-text, sb-count\n * @type {?}\n */\nShareButtonComponent.prototype.template;\n/** @type {?} */\nShareButtonComponent.prototype.cd;\n/** @type {?} */\nShareButtonComponent.prototype.share;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ShareDirectiveModule } from './share-directive.module';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonComponent } from '../components/share-button/share-button.component';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n/**\n * @param {?} httpClient\n * @param {?} options\n * @param {?} buttonsMeta\n * @return {?}\n */\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\nexport class ShareButtonModule {\n/**\n * @param {?=} options\n * @param {?=} buttonsMeta\n * @return {?}\n */\nstatic forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareButtonModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShareButtonComponent\n  ],\n  imports: [\n    ShareDirectiveModule\n  ],\n  exports: [\n    ShareDirectiveModule,\n    ShareButtonComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  ChangeDetectorRef,\n  QueryList,\n  ViewChildren,\n  OnInit,\n  HostBinding\n} from '@angular/core';\nimport { ShareButtonsService } from '../../services/share-buttons.service';\nimport { ShareButtonComponent } from '../share-button/share-button.component';\nexport class ShareButtonsComponent implements OnInit, OnDestroy {\n/**\n * Share URL\n */\nurl: string;\n/**\n * Share count value\n */\nshareCount: number;\n/**\n * Share Buttons array\n */\nbuttons: string[] = [];\n/**\n * Buttons to include\n */\nincludeButtons: string[] = this.share.buttons;\n/**\n * Buttons to exclude\n */\nexcludeButtons: string[] = [];\n/**\n * @param {?} includeButtons\n * @return {?}\n */\nset include(includeButtons: string[]) {\n    this.includeButtons = includeButtons;\n    this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n  }\n/**\n * @param {?} excludeButtons\n * @return {?}\n */\nset exclude(excludeButtons: string[]) {\n    this.excludeButtons = excludeButtons;\n    this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n  }\n/**\n * Number of shown buttons\n */\nshownButtons = this.includeButtons.length;\n/**\n * Number of included buttons\n */\ntotalButtons;\n/**\n * Disable more/less buttons\n */\nshowAll = false;\n/**\n * @param {?} shownCount\n * @return {?}\n */\nset setShownButtons(shownCount: number) {\n    this.shownButtons = shownCount;\n    this.totalButtons = this.buttons.length;\n    /** Set showAll to true if shown buttons count = selected buttons count */\n    this.showAll = this.shownButtons === this.totalButtons + 1;\n  }\n/**\n * Set share URL\n * @param {?} newUrl\n * @return {?}\n */\nset setUrl(newUrl: string) {\n    /** Reset share count on url changes */\n    this.shareCount = 0;\n    this.url = newUrl;\n  }\n/**\n * Share meta tags\n */\ntitle: string;\n   description: string;\n   image: string;\n   tags: string;\n/**\n * Show button icon\n */\nshowIcon = true;\n/**\n * Show button name\n */\nshowName = false;\n/**\n * Button size\n */\nsize: number;\n/**\n * Get and display share count\n */\nshowCount = false;\n/**\n * @param {?} show\n * @return {?}\n */\nset setShowCount(show: boolean) {\n    this.showCount = show;\n\n    if (this.shareComponents) {\n      /** Subscribe to count event */\n      this.shareComponents.forEach((shareComponent: ShareButtonComponent) => {\n\n        /** Check if sbCount has observers already, don't subscribe again */\n        if (!shareComponent.count.observers.length) {\n\n          /** Subscribe to the component count event (only if [showCount]=true) */\n          if (show || this.count.observers.length) {\n            shareComponent.count.subscribe(count => {\n              this.shareCount = count;\n              this.count.emit(count);\n              this.cd.markForCheck();\n            });\n          }\n        }\n      });\n    }\n  }\n/**\n * Buttons theme\n */\ntheme;\n/**\n * @param {?} theme\n * @return {?}\n */\nset setTheme(theme: string) {\n    /** Set buttons' theme to override the default theme */\n    this.theme = theme;\n    /** Set buttons' container theme */\n    this.containerClass = 'sb-group sb-' + theme;\n  }\n/**\n * Set theme as buttons' container class\n */\ncontainerClass = 'sb-group sb-' + this.share.theme;\n/**\n * Share count event\n */\ncount = new EventEmitter<number>();\n/**\n * Share dialog opened event\n */\nopened = new EventEmitter<string>();\n/**\n * Share dialog closed event\n */\nclosed = new EventEmitter<string>();\n/**\n * Share components ref\n */\nshareComponents: QueryList<ShareButtonComponent>;\n/**\n * @param {?} cd\n * @param {?} share\n */\nconstructor(private cd: ChangeDetectorRef,\npublic share: ShareButtonsService) {\n\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    /**  if use didn't select the buttons use all */\n    if (!this.excludeButtons.length) {\n      this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.shareComponents.forEach((shareComponent: ShareButtonComponent) => {\n      shareComponent.count.unsubscribe();\n    });\n  }\n/**\n * @return {?}\n */\nmore() {\n    this.totalButtons = this.shownButtons;\n    this.shownButtons = this.buttons.length;\n    this.showAll = true;\n  }\n/**\n * @return {?}\n */\nless() {\n    this.shownButtons = this.totalButtons;\n    this.showAll = false;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'share-buttons',\n  template: `\n    <share-button *ngFor=\"let button of buttons | slice: 0:shownButtons\" \n      [button]=\"button\" \n      [theme]=\"theme\"\n      [url]=\"url\"\n      [title]=\"title\"\n      [description]=\"description\" \n      [image]=\"image\" \n      [tags]=\"tags\" \n      [showCount]=\"showCount\" \n      [showIcon]=\"showIcon\" \n      [showName]=\"showName\"\n      [size]=\"size\" \n      (opened)=\"opened.emit($event)\" \n      (closed)=\"closed.emit($event)\"></share-button>\n\n    <div [class]=\"'sb-button sb-' + theme\" \n      [style.fontSize.px]=\"(1 + size/20) * 14\">\n\n      <!-- SHOW LESS BUTTON -->\n\n      <button *ngIf=\"showAll && shownButtons === buttons.length\" \n              class=\"sb-wrapper sb-more sb-show-icon\" (click)=\"less()\">\n\n        <div class=\"sb-inner\">\n          <div class=\"sb-content\">\n            <div class=\"sb-icon\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></div>\n          </div>\n        </div>\n      </button>\n\n      <!-- SHOW MORE BUTTON -->\n\n        <button *ngIf=\"!showAll && shownButtons < buttons.length\"\n                class=\"sb-wrapper sb-more sb-show-icon\" (click)=\"more()\">\n      \n          <div class=\"sb-inner\">\n            <div class=\"sb-content\">\n              <div class=\"sb-icon\"><i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i></div>\n            </div>\n          </div>\n        </button>\n\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ShareButtonsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'include': [{ type: Input, args: ['include', ] },],\n'exclude': [{ type: Input, args: ['exclude', ] },],\n'setShownButtons': [{ type: Input, args: ['show', ] },],\n'setUrl': [{ type: Input, args: ['url', ] },],\n'title': [{ type: Input },],\n'description': [{ type: Input },],\n'image': [{ type: Input },],\n'tags': [{ type: Input },],\n'showIcon': [{ type: Input },],\n'showName': [{ type: Input },],\n'size': [{ type: Input },],\n'setShowCount': [{ type: Input, args: ['showCount', ] },],\n'setTheme': [{ type: Input, args: ['theme', ] },],\n'containerClass': [{ type: HostBinding, args: ['class', ] },],\n'count': [{ type: Output },],\n'opened': [{ type: Output },],\n'closed': [{ type: Output },],\n'shareComponents': [{ type: ViewChildren, args: [ShareButtonComponent, ] },],\n};\n}\n\nfunction ShareButtonsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonsComponent.ctorParameters;\n/** @type {?} */\nShareButtonsComponent.propDecorators;\n/**\n * Share URL\n * @type {?}\n */\nShareButtonsComponent.prototype.url;\n/**\n * Share count value\n * @type {?}\n */\nShareButtonsComponent.prototype.shareCount;\n/**\n * Share Buttons array\n * @type {?}\n */\nShareButtonsComponent.prototype.buttons;\n/**\n * Buttons to include\n * @type {?}\n */\nShareButtonsComponent.prototype.includeButtons;\n/**\n * Buttons to exclude\n * @type {?}\n */\nShareButtonsComponent.prototype.excludeButtons;\n/**\n * Number of shown buttons\n * @type {?}\n */\nShareButtonsComponent.prototype.shownButtons;\n/**\n * Number of included buttons\n * @type {?}\n */\nShareButtonsComponent.prototype.totalButtons;\n/**\n * Disable more/less buttons\n * @type {?}\n */\nShareButtonsComponent.prototype.showAll;\n/**\n * Share meta tags\n * @type {?}\n */\nShareButtonsComponent.prototype.title;\n/** @type {?} */\nShareButtonsComponent.prototype.description;\n/** @type {?} */\nShareButtonsComponent.prototype.image;\n/** @type {?} */\nShareButtonsComponent.prototype.tags;\n/**\n * Show button icon\n * @type {?}\n */\nShareButtonsComponent.prototype.showIcon;\n/**\n * Show button name\n * @type {?}\n */\nShareButtonsComponent.prototype.showName;\n/**\n * Button size\n * @type {?}\n */\nShareButtonsComponent.prototype.size;\n/**\n * Get and display share count\n * @type {?}\n */\nShareButtonsComponent.prototype.showCount;\n/**\n * Buttons theme\n * @type {?}\n */\nShareButtonsComponent.prototype.theme;\n/**\n * Set theme as buttons' container class\n * @type {?}\n */\nShareButtonsComponent.prototype.containerClass;\n/**\n * Share count event\n * @type {?}\n */\nShareButtonsComponent.prototype.count;\n/**\n * Share dialog opened event\n * @type {?}\n */\nShareButtonsComponent.prototype.opened;\n/**\n * Share dialog closed event\n * @type {?}\n */\nShareButtonsComponent.prototype.closed;\n/**\n * Share components ref\n * @type {?}\n */\nShareButtonsComponent.prototype.shareComponents;\n/** @type {?} */\nShareButtonsComponent.prototype.cd;\n/** @type {?} */\nShareButtonsComponent.prototype.share;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, InjectionToken } from '@angular/core';\n\nimport { ShareButtonModule } from './share-button.module';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonsComponent } from '../components/share-buttons/share-buttons.component';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n/**\n * @param {?} httpClient\n * @param {?} options\n * @param {?} buttonsMeta\n * @return {?}\n */\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\nexport class ShareButtonsModule {\n/**\n * @param {?=} options\n * @param {?=} buttonsMeta\n * @return {?}\n */\nstatic forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareButtonsModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShareButtonsComponent\n  ],\n  imports: [\n    ShareButtonModule\n  ],\n  exports: [\n    ShareButtonModule,\n    ShareButtonsComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareButtonsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonsModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ShareButtonsModule,ShareButtonModule,ShareDirectiveModule,ShareButtonDirective,ShareButtonComponent,ShareButtonsComponent,ShareButtonsService,NFormatterPipe,ShareButtonsOptions,ShareButtonProp} from './index';\n\nexport {ShareButtonsMeta as ɵd} from './models/share-buttons.models';\nexport {ShareButtonsFactory as ɵb} from './modules/share-button.module';\nexport {ShareButtonsFactory as ɵa} from './modules/share-buttons.module';\nexport {ShareButtonsFactory as ɵc} from './modules/share-directive.module';\nexport {BUTTONS_META as ɵf,OPTIONS as ɵe} from './modules/tokens';\nexport {UniversalSupportService as ɵg} from './services/universal-support.service';"],"names":["ShareButtonsFactory"],"mappings":";;;;;;;;;;;;;;;;;;IAYA,YAFqB,IAAM,EAAyB,IAAM;QAArC,SAAA,GAAA,IAAA,CAAM;QAAyB,SAAA,GAAA,IAAA,CAAM;KAIvD;;;;;;IAMH,IAPG,CAAA,GAAA,EAAA,IAAA;QAQC,qBAPI,QAAA,GAAW,IAAA,CAAM,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;QASzC,IAAI,IAPC,CAAI,KAAC,EAAM;YAQd,QAAQ,IAPI,SAAA,GAAY,IAAA,CAAK,KAAC,CAAK;SAQpC;QAED,OAPO,QAAA,CAAS;KAQjB;;;;;IAKH,KAVG,CAAA,GAAA;QAYC,OAVO,IAAA,CAAK,IAAC,CAAI,GAAC,CAAU,IAAE,CAAI,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;aAWnD,MAVC,CAAM,GAAC,IAAM,CAAA,EAAG,GAAC,CAAG,KAAC,IAAQ,GAAA,CAAI,KAAC,CAAK,WAAC,CAAW,CAAC;aAWrD,GAVC,CAAG,GAAC,IAAM,CAAA,GAAE,CAAG,KAAC,CAAK,WAAC,CAAW;aAWlC,KAVC,CAAK,GAAC,IAAM,UAAA,CAAW,KAAC,EAAK,CAAE,CAAC;KAWrC;CACF;;ACxCD;AAGA;;;;IAQA,YAFqB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;KAGxB;;;;;;IAMH,IANG,CAAA,GAAA,EAAA,IAAA;QAQC,qBANI,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;QAQxC,IAAI,IANC,CAAI,WAAC,EAAY;YAOpB,QAAQ,IANI,QAAA,GAAW,IAAA,CAAK,WAAC,CAAW;SAOzC;QAED,IAAI,IANC,CAAI,GAAC,EAAI;YAOZ,QAAQ,IANI,OAAA,GAAU,IAAA,CAAK,GAAC,CAAG;SAOhC;QAED,IAAI,IANC,CAAI,IAAC,EAAK;YAOb,QAAQ,IANI,YAAA,GAAe,IAAA,CAAK,IAAC,CAAI;SAOtC;QAED,OANO,QAAA,CAAS;KAOjB;;;;IAIH,KARG;QAUC,OARO,UAAA,CAAW,KAAC,EAAK,CAAE;KAS3B;CAEF;;AC5CD;AAIA;;;;;IAWA,YAHqB,IAAM,EAAyB,IAAM;QAArC,SAAA,GAAA,IAAA,CAAM;QAAyB,SAAA,GAAA,IAAA,CAAM;KAKvD;;;;;;IAMH,IARG,CAAA,GAAA,EAAA,IAAA;QAUC,qBARI,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;QAUxC,IAAI,IARC,CAAI,KAAC,EAAM;YASd,QAAQ,IARI,SAAA,GAAY,IAAA,CAAK,KAAC,CAAK;SASpC;QACD,IAAI,IARC,CAAI,WAAC,EAAY;YASpB,QAAQ,IARI,WAAA,GAAc,IAAA,CAAK,WAAC,CAAW;SAS5C;QAED,OARO,QAAA,CAAS;KASjB;;;;;IAKH,KAXG,CAAA,GAAA;QAaC,OAXO,IAAA,CAAK,IAAC,CAAI,KAAC,CAAY,IAAE,CAAI,IAAC,CAAI,QAAC,GAAU,GAAA,EAAK,UAAA,CAAW;aAYjE,MAXC,CAAM,GAAC,IAAM,CAAA,CAAE,GAAC,CAAG,KAAC,CAAK;aAY1B,GAXC,CAAG,GAAC,IAAM,CAAA,GAAE,CAAG,KAAC,CAAK;aAYtB,KAXC,CAAK,GAAC,IAAM,UAAA,CAAW,KAAC,EAAK,CAAE,CAAC;KAYrC;CACF;;AC/CD;AAIA;;;;;IAWA,YAHqB,IAAM,EAAyB,IAAM;QAArC,SAAA,GAAA,IAAA,CAAM;QAAyB,SAAA,GAAA,IAAA,CAAM;KAKvD;;;;;;IAMH,IARG,CAAA,GAAA,EAAA,IAAA;QAUC,qBARI,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;QAUxC,IAAI,IARC,CAAI,WAAC,EAAY;YASpB,QAAQ,IARI,WAAA,GAAc,IAAA,CAAK,WAAC,CAAW;SAS5C;QAED,IAAI,IARC,CAAI,IAAC,EAAK;YASb,QAAQ,IARI,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI;SASlC;QAED,OARO,QAAA,CAAS;KASjB;;;;;IAKH,KAXG,CAAA,GAAA;QAaC,OAXO,IAAA,CAAK,IAAC,CAAI,KAAC,CAAY,IAAE,CAAI,IAAC,CAAI,QAAC,GAAU,GAAA,EAAK,UAAA,CAAW;aAYjE,MAXC,CAAM,GAAC,IAAM,CAAA,EAAG,GAAC,CAAG,QAAC,IAAW,GAAA,CAAI,QAAC,CAAQ,UAAC,CAAU,CAAC;aAY1D,GAXC,CAAG,GAAC,IAAM,CAAA,GAAE,CAAG,QAAC,CAAQ,UAAC,CAAU;aAYpC,KAXC,CAAK,GAAC,IAAM,UAAA,CAAW,KAAC,EAAK,CAAE,CAAC;KAYrC;CACF;;;;;;ICvCD,YADqB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;KAExB;;;;;;IAMH,IALG,CAAA,GAAA,EAAA,IAAA;QAOC,qBALI,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI,QAAC,CAAQ;QAOlC,IAAI,IALC,CAAI,WAAC,EAAY;YAMpB,QAAQ,IALI,IAAA,CAAK,WAAC,GAAa,MAAA,CAAO;SAMvC;QAED,OALO,QAAA,GAAW,GAAA,CAAI;KAMvB;;;;IAIH,KAPG;QASC,OAPO,UAAA,CAAW,KAAC,EAAK,CAAE;KAQ3B;CAEF;;;;;;;ICtBD,YAFqB,IAAM,EAAyB,IAAM;QAArC,SAAA,GAAA,IAAA,CAAM;QAAyB,SAAA,GAAA,IAAA,CAAM;KAIvD;;;;;;IAMH,IAPG,CAAA,GAAA,EAAA,IAAA;QASC,qBAPI,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;;QAWxC,IAAI,IAPC,CAAI,WAAC,EAAY;YAQpB,QAAQ,IAPI,eAAA,GAAkB,IAAA,CAAK,WAAC,CAAW;SAQhD;aAPM,IAAA,QAAK,EAAS;;;;YAWzB,MARO,aAAA,GAAA,QAAA,CAAA,aAAA,CAAA,iCAAA,CAAA,CAAA;YASD,IAAI,aARC,EAAc;gBASjB,QAAQ,IARI,eAAA,GAAkB,aAAA,CAAc,YAAC,CAAY,SAAC,CAAS,CAAC;aASrE;iBARM;gBASL,OAAO,CARC,IAAC,CAAI,2EAAC,CAA2E,CAAC;aAS3F;SACF;QAED,IAAI,IARC,CAAI,KAAC,EAAM;YASd,QAAQ,IARI,SAAA,GAAY,IAAA,CAAK,KAAC,CAAK;SASpC;aARM,IAAA,QAAK,EAAS;YASnB,uBARM,OAAA,GAAmB,QAAA,CAAS,aAAC,CAAa,2BAAC,CAA2B,CAAC;YAS7E,IAAI,OARC,EAAQ;gBASX,QAAQ,IARI,SAAA,GAAY,OAAA,CAAQ,YAAC,CAAY,SAAC,CAAS,CAAC;aASzD;iBARM;gBASL,OAAO,CARC,IAAC,CAAI,oEAAC,CAAoE,CAAC;aASpF;SACF;QAED,OARO,QAAA,CAAS;KASjB;;;;;IAKH,KAXG,CAAA,GAAA;QAaC,OAXO,IAAA,CAAK,IAAC,CAAI,GAAC,CAAG,IAAC,CAAI,IAAC,CAAI,QAAC,GAAU,GAAA,EAAK,EAAA,YAAE,EAAa,MAAA,EAAO,CAAC;aAYnE,GAXC,CAAG,IAAC,KAAe,IAAC,CAAI,KAAC,CAAK,IAAC,CAAI,OAAC,CAAO,uBAAC,EAAwB,IAAA,CAAK,CAAC,CAAA,CAAC;aAY5E,MAXC,CAAM,GAAC,IAAM,CAAA,CAAE,GAAC,CAAG,KAAC,CAAK;aAY1B,GAXC,CAAG,GAAC,IAAM,CAAA,GAAE,CAAG,KAAC,CAAK;aAYtB,KAXC,CAAK,GAAC,IAAM,UAAA,CAAW,KAAC,EAAK,CAAE,CAAC;KAYrC;CAEF;;AClED;AAIA;;;;;IAWA,YAHqB,IAAM,EAAyB,IAAM;QAArC,SAAA,GAAA,IAAA,CAAM;QAAyB,SAAA,GAAA,IAAA,CAAM;KAKvD;;;;;;IAMH,IARG,CAAA,GAAA,EAAA,IAAA;QAUC,qBARI,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;QAUxC,IAAI,IARC,CAAI,KAAC,EAAM;YASd,QAAQ,IARI,SAAA,GAAY,IAAA,CAAK,KAAC,CAAK;SASpC;QAED,OARO,QAAA,CAAS;KASjB;;;;;IAKH,KAXG,CAAA,GAAA;QAaC,OAXO,IAAA,CAAK,IAAC,CAAI,GAAC,CAAU,IAAE,CAAI,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;aAYnD,MAXC,CAAM,GAAC,IAAM,CAAA,EAAG,GAAC,CAAG,IAAC,IAAO,GAAA,CAAI,IAAC,CAAI,QAAC,IAAW,GAAA,CAAI,IAAC,CAAI,QAAC,CAAQ,MAAC,CAAM,CAAC;aAY5E,GAXC,CAAG,GAAC,IAAM,CAAA,GAAE,CAAG,IAAC,CAAI,QAAC,CAAQ,CAAC,CAAC,CAAC,IAAC,CAAI,KAAC,CAAK;aAY5C,KAXC,CAAK,GAAC,IAAM,UAAA,CAAW,KAAC,EAAK,CAAE,CAAC;KAYrC;CACF;;AC5CD;AAIA;;;;;IAQA,YAHqB,IAAM,EAAyB,IAAM;QAArC,SAAA,GAAA,IAAA,CAAM;QAAyB,SAAA,GAAA,IAAA,CAAM;KAKvD;;;;;IAKH,IAPG,CAAA,GAAA;QAQC,OAPO,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;KAQjC;;;;;IAKH,KAVG,CAAA,GAAA;QAYC,OAVO,UAAA,CAAW,KAAC,EAAK,CAAE;KAW3B;CACF;;AC9BD;AAGA;;;;IAQA,YAFqB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;KAGxB;;;;;IAKH,IALG,CAAA,GAAA;QAOC,OALO,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;KAMjC;;;;IAIH,KAPG;QASC,OAPO,UAAA,CAAW,KAAC,EAAK,CAAE;KAQ3B;CACF;;;;;;ICnBD,YADqB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;KAExB;;;;;;IAMH,IALG,CAAA,GAAA,EAAA,IAAA;QAOC,qBALI,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;QAOxC,IAAI,IALC,CAAI,WAAC,EAAY;YAMpB,QAAQ,IALI,QAAA,GAAW,IAAA,CAAK,WAAC,CAAW;SAMzC;QAED,OALO,QAAA,CAAS;KAMjB;;;;IAIH,KAPG;QASC,OAPO,UAAA,CAAW,KAAC,EAAK,CAAE;KAQ3B;CAEF;;;;;;ICxBD,YADqB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;KAExB;;;;;;IAMH,IALG,CAAA,GAAA,EAAA,IAAA;QAOC,qBALI,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,IAAA,CAAK,KAAC,CAAK;QAO/C,IAAI,IALC,CAAI,KAAC,EAAM;YAMd,QAAQ,IALI,WAAA,GAAc,IAAA,CAAK,KAAC,CAAK;SAMtC;QAED,QAAQ,IALI,QAAA,CAAS;QAMrB,IAAI,IALC,CAAI,WAAC,EAAY;YAMpB,QAAQ,IALI,IAAA,CAAK,WAAC,GAAa,MAAA,CAAO;SAMvC;QAED,OALO,QAAA,GAAW,GAAA,CAAI;KAMvB;;;;IAIH,KAPG;QASC,OAPO,UAAA,CAAW,KAAC,EAAK,CAAE;KAQ3B;CAEF;;;;;;IC1BD,YADqB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;KAExB;;;;;;IAMH,IALG,CAAA,GAAA,EAAA,IAAA;QAMC,IAAI,CALC,kBAAC,CAAkB,GAAC,EAAI,IAAA,CAAK,SAAC,CAAS,CAAC;QAM7C,OALO,IAAA,CAAK;KAMb;;;;IAIH,KAPG;QASC,OAPO,UAAA,CAAW,KAAC,EAAK,CAAE;KAQ3B;;;;;;;IAOH,kBAXG,CAAA,GAAA,EAAA,SAAA;QAaC,uBAXM,IAAA,GAAO,EAAA,IAAE,EAAK,SAAA,CAAU,WAAC,CAAW,IAAC,CAAI,IAAC,EAAK,IAAA,EAAM,SAAA,CAAU,WAAC,CAAW,IAAC,CAAI,IAAC,EAAI,CAAC;QAY5F,UAAU,CAXC,EAAC,CAAE,EAAC,CAAE,CAAC,IAAC,CAAI,CAAC,CAAC,CAAC,EAAC,CAAE;YAYzB,GAAG,GAXG,kBAAA,CAAmB,GAAC,CAAG,CAAC;YAY9B,uBAXM,QAAA,GAAW,SAAA,CAAU,QAAC,CAAQ,aAAC,CAAa,UAAC,CAAU,CAAC;;YAc9D,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,UAAA,EAAY,OAAA,CAAQ,CAAC;YAY3D,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,KAAA,EAAO,CAAA,CAAE,CAAC;YAYhD,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,MAAA,EAAQ,CAAA,CAAE,CAAC;;;YAejD,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,OAAA,EAAS,KAAA,CAAM,CAAC;YAYtD,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,QAAA,EAAU,KAAA,CAAM,CAAC;;YAcvD,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,SAAA,EAAW,CAAA,CAAE,CAAC;;YAcpD,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,QAAA,EAAU,MAAA,CAAO,CAAC;YAYxD,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,SAAA,EAAW,MAAA,CAAO,CAAC;YAYzD,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,WAAA,EAAa,MAAA,CAAO,CAAC;;YAc3D,SAAS,CAXC,QAAC,CAAQ,QAAC,CAAQ,QAAC,EAAS,YAAA,EAAc,aAAA,CAAc,CAAC;YAYnE,SAAS,CAXC,QAAC,CAAQ,WAAC,CAAW,QAAC,EAAS,OAAA,EAAS,GAAA,CAAI,CAAC;YAYvD,SAAS,CAXC,QAAC,CAAQ,WAAC,CAAW,SAAC,CAAS,EAAC,EAAG,QAAA,CAAS,CAAC;YAavD,QAAQ,CAXC,MAAC,EAAM,CAAE;YAalB,QAAQ,CAXC,WAAC,CAAW,MAAC,CAAM,CAAC;YAa7B,SAAS,CAXC,QAAC,CAAQ,WAAC,CAAW,SAAC,CAAS,EAAC,EAAG,QAAA,CAAS,CAAC;YAavD,SAAS,CAXC,WAAC,CAAW,IAAC,CAAI,IAAC,GAAM,IAAA,CAAK,IAAC,CAAI,WAAC,CAAW;YAYxD,SAAS,CAXC,WAAC,CAAW,IAAC,CAAI,IAAC,GAAM,IAAA,CAAK,IAAC,CAAI,WAAC,CAAW;YAYxD,SAAS,CAXC,EAAC,CAAE,YAAC,EAAY,CAAE;SAY7B,EACD;YACE,SAAS,CAXC,WAAC,CAAW,IAAC,CAAI,IAAC,GAAM,IAAA,CAAK,IAAC,CAAI,QAAC,CAAQ;YAYrD,SAAS,CAXC,WAAC,CAAW,IAAC,CAAI,IAAC,GAAM,IAAA,CAAK,IAAC,CAAI,QAAC,CAAQ;YAYrD,SAAS,CAXC,EAAC,CAAE,YAAC,EAAY,CAAE;YAY5B,OAAO,CAXC,IAAC,CAAI,8DAAC,CAA8D,CAAC;SAY9E,CAXC;aAYD,KAXC,CAAK,IAAC,CAAI;aAYX,EAXC,CAAE;YAYF,SAAS,CAXC,WAAC,CAAW,IAAC,CAAI,IAAC,GAAM,IAAA,CAAK,IAAC,CAAI;YAY5C,SAAS,CAXC,WAAC,CAAW,IAAC,CAAI,IAAC,GAAM,IAAA,CAAK,IAAC,CAAI;YAY5C,SAAS,CAXC,EAAC,CAAE,YAAC,EAAY,CAAE;SAY7B,CAXC;aAYD,SAXC,EAAS,CAAE;KAahB;CAEF;;;;;;ICrFD,YADqB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;KAExB;;;;;;IAMH,IALG,CAAA,GAAA,EAAA,IAAA;QAOC,IAAI,CALC,SAAC,CAAS,MAAC,CAAM,KAAC,EAAK,CAAE;QAM9B,OALO,IAAA,CAAK;KAMb;;;;IAIH,KAPG;QASC,OAPO,UAAA,CAAW,KAAC,EAAK,CAAE;KAQ3B;CAEF;;AC7BD;AAIA;;;;IAQA,YAFqB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;KAGxB;;;;;;IAMH,IANG,CAAA,GAAA,EAAA,IAAA;QAOC,OANO,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,GAAA,CAAI;KAOjC;;;;IAIH,KARG;QASC,OARO,UAAA,CAAW,KAAC,EAAK,CAAE;KAS3B;CAEF;;ACdM,MAAM,OAAA,GAAU;IACrB,QAAQ,EAAE;QACR,IAAI,EAAE,UAAA;QACN,IAAI,EAAE,UAAA;QACN,IAAI,EAAE,gBAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,IAAA;QACd,QAAQ,EAAE,+CAAA;QACV,UAAU,EAAE,qBAAA;QACZ,MAAM,EAAE,OAAA;QACR,QAAQ,EAAE,gCAAA;KACX;IACD,OAAO,EAAE;QACP,IAAI,EAAE,SAAA;QACN,IAAI,EAAE,SAAA;QACN,IAAI,EAAE,eAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,KAAA;QACd,QAAQ,EAAE,uCAAA;QACV,UAAU,EAAE,qBAAA;QACZ,MAAM,EAAE,sBAAA;KACT;IACD,MAAM,EAAE;QACN,IAAI,EAAE,QAAA;QACN,IAAI,EAAE,SAAA;QACN,IAAI,EAAE,mBAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,KAAA;QACd,QAAQ,EAAE,oCAAA;QACV,UAAU,EAAE,EAAA;QACZ,MAAM,EAAE,EAAA;KACT;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,UAAA;QACN,IAAI,EAAE,UAAA;QACN,IAAI,EAAE,gBAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,IAAA;QACd,QAAQ,EAAE,2CAAA;QACV,UAAU,EAAE,sBAAA;QACZ,MAAM,EAAE,aAAA;QACR,QAAQ,EAAE,qDAAA;KACX;IACD,SAAS,EAAE;QACT,IAAI,EAAE,WAAA;QACN,IAAI,EAAE,WAAA;QACN,IAAI,EAAE,mBAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,IAAA;QACd,QAAQ,EAAE,kDAAA;QACV,UAAU,EAAE,EAAA;QACZ,MAAM,EAAE,EAAA;QACR,QAAQ,EAAE,yEAAA;KACX;IACD,MAAM,EAAE;QACN,IAAI,EAAE,QAAA;QACN,IAAI,EAAE,QAAA;QACN,IAAI,EAAE,oBAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,IAAA;QACd,QAAQ,EAAE,mCAAA;QACV,UAAU,EAAE,EAAA;QACZ,MAAM,EAAE,EAAA;QACR,QAAQ,EAAE,kDAAA;KACX;IACD,MAAM,EAAE;QACN,IAAI,EAAE,QAAA;QACN,IAAI,EAAE,QAAA;QACN,IAAI,EAAE,cAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,IAAA;QACd,QAAQ,EAAE,oDAAA;QACV,UAAU,EAAE,EAAA;QACZ,MAAM,EAAE,EAAA;QACR,QAAQ,EAAE,4CAAA;KACX;IACD,KAAK,EAAE;QACL,IAAI,EAAE,OAAA;QACN,IAAI,EAAE,OAAA;QACN,IAAI,EAAE,aAAA;QACN,KAAK,EAAE,OAAA;QACP,YAAY,EAAE,KAAA;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,SAAA;QACN,IAAI,EAAE,SAAA;QACN,IAAI,EAAE,mBAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,KAAA;QACd,QAAQ,EAAE,wCAAA;QACV,UAAU,EAAE,EAAA;QACZ,MAAM,EAAE,EAAA;KACT;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,UAAA;QACN,IAAI,EAAE,UAAA;QACN,IAAI,EAAE,YAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,KAAA;QACd,QAAQ,EAAE,6BAAA;QACV,UAAU,EAAE,EAAA;QACZ,MAAM,EAAE,EAAA;KACT;IACD,EAAE,EAAE;QACF,IAAI,EAAE,IAAA;QACN,IAAI,EAAE,WAAA;QACN,IAAI,EAAE,UAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,KAAA;QACd,QAAQ,EAAE,8BAAA;QACV,UAAU,EAAE,EAAA;QACZ,MAAM,EAAE,EAAA;KACT;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAA;QACN,IAAI,EAAE,WAAA;QACN,WAAW,EAAE,QAAA;QACb,WAAW,EAAE,aAAA;QACb,QAAQ,EAAE,OAAA;QACV,QAAQ,EAAE,mBAAA;QACV,IAAI,EAAE,YAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,KAAA;KACf;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,UAAA;QACN,IAAI,EAAE,UAAA;QACN,IAAI,EAAE,gBAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,KAAA;QACd,QAAQ,EAAE,qCAAA;QACV,UAAU,EAAE,sBAAA;QACZ,MAAM,EAAE,mBAAA;KACT;IACD,KAAK,EAAE;QACL,IAAI,EAAE,OAAA;QACN,IAAI,EAAE,OAAA;QACN,IAAI,EAAE,gBAAA;QACN,KAAK,EAAE,SAAA;QACP,YAAY,EAAE,KAAA;QACd,QAAQ,EAAE,UAAA;KACX;CACF;;AC1JM,MAAM,OAAA,GAAU,IAAI,cAAA,CAAmC,SAAE,CAAS,CAAC;AAC1E,AAAO,MAAM,YAAA,GAAe,IAAI,cAAA,CAAgC,cAAE,CAAc;;;;;;;;IC+DhF,YALsB,IAAM,EAMvB,OALS,EAMT,IALM;QAFW,SAAA,GAAA,IAAA,CAAM;;;;QArC5B,eACG,GAAA;YAAC,UAAU;YACV,SAAS;YACT,UAAU;YACV,WAAW;YACX,QAAQ;YACR,SAAS;YACT,QAAQ;YACR,UAAU;YACV,QAAQ;YACR,IAAI;YACJ,UAAU;YACV,OAAO;YACP,MAAM;YACN,OAAO;SACR,CAAC;;;;QAIJ,YAAG,GAAA;YACC,KAAK,EAAE,SAAS;YAChB,WAAW,EAAE,GAAG;YAChB,YAAY,EAAE,GAAG;YACjB,OAAO,EAAE,IAAI,CAAC,UAAU;YACxB,OAAO,EAAE,EAAE;YACX,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,IAAI;YACX,KAAK,EAAE,IAAI;YACX,WAAW,EAAE,IAAI;YACjB,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,KAAK;YACjB,cAAc,EAAE,IAAI;SACrB,CAAC;;;;QAIJ,SADG,GAAA,OAAA,CAAA;;QAYC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACxC;;;;IAIH,IANG,cAAA;QAOC,OANO,IAAA,CAAK,OAAC,CAAO,cAAC,CAAc;KAOpC;;;;IAIH,IARG,UAAA;QASC,OARO,SAAA,IAAU,CAAI,OAAC,CAAO,WAAC,YAAW,IAAY,CAAI,OAAC,CAAO,YAAC,EAAY,CAAE;KASjF;;;;;IAKH,IAVG,OAAA;QAWC,IAAI,CAVC,IAAC,CAAI,OAAC,CAAO,OAAC,CAAO,MAAC,EAAO;YAWhC,OAVO,IAAA,CAAK,OAAC,CAAO,OAAC,CAAO;SAW7B;QACD,OAVO,IAAA,CAAK,OAAC,CAAO,OAAC,CAAO,MAAC,CAAM,CAAC,GAAC,KAAO,IAAA,CAAK,OAAC,CAAO,OAAC,CAAO,OAAC,CAAO,GAAC,CAAG,GAAG,CAAA,CAAE,CAAC;KAWpF;;;;IAIH,IAZG,KAAA;QAaC,OAZO,IAAA,CAAK,OAAC,CAAO,KAAC,CAAK;KAa3B;;;;;IAKH,IAbG,KAAA;QAcC,OAbO,IAAA,CAAK,OAAC,CAAO,KAAC,CAAK;KAc3B;;;;IAIH,IAfG,WAAA;QAgBC,OAfO,IAAA,CAAK,OAAC,CAAO,WAAC,CAAW;KAgBjC;;;;IAIH,IAjBG,KAAA;QAkBC,OAjBO,IAAA,CAAK,OAAC,CAAO,KAAC,CAAK;KAkB3B;;;;IAIH,IAnBG,IAAA;QAoBC,OAnBO,IAAA,CAAK,OAAC,CAAO,IAAC,CAAI;KAoB1B;;;;IAIH,IArBG,UAAA;QAsBC,OArBO,IAAA,CAAK,OAAC,CAAO,UAAC,CAAU;KAsBhC;;;;IAIH,IAvBG,IAAA;QAwBC,OAvBO,IAAA,CAAK,OAAC,CAAO,IAAC,CAAI;KAwB1B;;;;;IAKH,iBA1BG,CAAA,UAAA;QA4BC,QAAQ,UA1BC,CAAU,WAAC,EAAW;YA2B7B,KA1BK,IAAA,CAAK,IAAC,CAAI,QAAC,CAAQ,IAAC;gBA2BvB,OA1BO,IAAI,cAAA,CAAe,IAAC,CAAI,IAAC,CAAI,QAAC,EAAS,IAAA,CAAK,IAAC,CAAI,CAAC;YA2B3D,KA1BK,IAAA,CAAK,IAAC,CAAI,OAAC,CAAO,IAAC;gBA2BtB,OA1BO,IAAI,aAAA,CAAc,IAAC,CAAI,IAAC,CAAI,OAAC,CAAO,CAAC;YA2B9C,KA1BK,IAAA,CAAK,IAAC,CAAI,MAAC,CAAM,IAAC;gBA2BrB,OA1BO,IAAI,YAAA,CAAa,IAAC,CAAI,IAAC,CAAI,MAAC,EAAO,IAAA,CAAK,IAAC,CAAI,CAAC;YA2BvD,KA1BK,IAAA,CAAK,IAAC,CAAI,SAAC,CAAS,IAAC;gBA2BxB,OA1BO,IAAI,eAAA,CAAgB,IAAC,CAAI,IAAC,CAAI,SAAC,EAAU,IAAA,CAAK,IAAC,CAAI,CAAC;YA2B7D,KA1BK,IAAA,CAAK,IAAC,CAAI,QAAC,CAAQ,IAAC;gBA2BvB,OA1BO,IAAI,cAAA,CAAe,IAAC,CAAI,IAAC,CAAI,QAAC,EAAS,IAAA,CAAK,IAAC,CAAI,CAAC;YA2B3D,KA1BK,IAAA,CAAK,IAAC,CAAI,MAAC,CAAM,IAAC;gBA2BrB,OA1BO,IAAI,YAAA,CAAa,IAAC,CAAI,IAAC,CAAI,MAAC,EAAO,IAAA,CAAK,IAAC,CAAI,CAAC;YA2BvD,KA1BK,IAAA,CAAK,IAAC,CAAI,MAAC,CAAM,IAAC;gBA2BrB,OA1BO,IAAI,YAAA,CAAa,IAAC,CAAI,IAAC,CAAI,MAAC,EAAO,IAAA,CAAK,IAAC,CAAI,CAAC;YA2BvD,KA1BK,IAAA,CAAK,IAAC,CAAI,OAAC,CAAO,IAAC;gBA2BtB,OA1BO,IAAI,aAAA,CAAc,IAAC,CAAI,IAAC,CAAI,OAAC,CAAO,CAAC;YA2B9C,KA1BK,IAAA,CAAK,IAAC,CAAI,QAAC,CAAQ,IAAC;gBA2BvB,OA1BO,IAAI,cAAA,CAAe,IAAC,CAAI,IAAC,CAAI,QAAC,CAAQ,CAAC;YA2BhD,KA1BK,IAAA,CAAK,IAAC,CAAI,EAAC,CAAE,IAAC;gBA2BjB,OA1BO,IAAI,eAAA,CAAgB,IAAC,CAAI,IAAC,CAAI,EAAC,CAAE,CAAC;YA2B3C,KA1BK,IAAA,CAAK,IAAC,CAAI,QAAC,CAAQ,IAAC;gBA2BvB,OA1BO,IAAI,cAAA,CAAe,IAAC,CAAI,IAAC,CAAI,QAAC,CAAQ,CAAC;YA2BhD,KA1BK,IAAA,CAAK,IAAC,CAAI,KAAC,CAAK,IAAC;gBA2BpB,OA1BO,IAAI,WAAA,CAAY,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,CAAC;YA2B1C,KA1BK,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,IAAC;gBA2BnB,OA1BO,IAAI,UAAA,CAAW,IAAC,CAAI,IAAC,CAAI,IAAC,CAAI,CAAC;YA2BxC,KA1BK,IAAA,CAAK,IAAC,CAAI,KAAC,CAAK,IAAC;gBA2BpB,OA1BO,IAAI,WAAA,CAAY,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,CAAC;YA2B1C;gBACE,OA1BO,IAAA,CAAK;SA2Bf;KACF;;;;;;;IAOH,WAzBG;;;;;;;;;;;;;QA0CC,OAzBO,SAAA,CAAU;KA0BlB;;AAvBI,8BAAA,GAAoC;IA0B3C,EAzBE,IAAA,EAAM,UAAA,EAAW;CA0BlB,CAzBC;;;;AAED,kCAAA,GAAA,MAAA;IA4BD,EAAC,IAAI,EAAE,UATQ,GAAI;IAUnB,EAAC,IAAI,EAAE,SATI,EAAA,UAAgB,EAAG,CAAC,EAAE,IAAE,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,EAAA,EAAA;IAUnC,EAAC,IAAI,EAAE,SATO,EAAA,UAAc,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,EAAA;CAU3B,CAAC;AAGF,AA2BA;;;;;AAKA,kBAtDC,IAAA;IAuDC,QA/DO,IAAE,IAAO,OAAO,IAAA,KAAS,QAAA,IAAY,CAAA,KAAE,CAAK,OAAC,CAAO,IAAC,CAAI,EAAE;CAgEnE;;;;;;;AAOD,mBAtDC,MAAA,EAAA,GAAA,OAAA;IAuDC,IAAI,CA/DC,OAAC,CAAO,MAAC,EAAO;QAgEnB,OA/DO,MAAA,CAAO;KAgEf;IACD,uBA/DM,MAAA,GAAS,OAAA,CAAQ,KAAC,EAAK,CAAE;IAiE/B,IAAI,QA/DC,CAAQ,MAAC,CAAM,IAAI,QAAA,CAAS,MAAC,CAAM,EAAE;QAgExC,KAAK,uBA/DM,GAAA,IAAO,MAAA,EAAQ;YAgExB,IAAI,QA/DC,CAAQ,MAAC,CAAM,GAAC,CAAG,CAAC,EAAE;gBAgEzB,IAAI,CA/DC,MAAC,CAAM,GAAC,CAAG,EAAE;oBAgEhB,MAAM,CA/DC,MAAC,CAAM,MAAC,EAAO,EAAE,CAAA,GAAE,GAAK,EAAA,EAAG,CAAE,CAAC;iBAgEtC;gBACD,SAAS,CA/DC,MAAC,CAAM,GAAC,CAAG,EAAE,MAAA,CAAO,GAAC,CAAG,CAAC,CAAC;aAgErC;iBA/DM;gBAgEL,MAAM,CA/DC,MAAC,CAAM,MAAC,EAAO,EAAE,CAAA,GAAE,GAAK,MAAA,CAAO,GAAC,CAAG,EAAC,CAAE,CAAC;aAgE/C;SACF;KACF;IAED,OA/DO,SAAA,CAAU,MAAC,EAAO,GAAA,OAAI,CAAO,CAAC;CAgEtC;;;;;;IC/QD,IAAK,YAAA;QACG,IAAI;YACA,OAAO,MAAA,CAAO;SACjB;QAAC,OAAA,CAAQ,EAAE;YACV,OAAO,MAAA,CAAO;SACf;KACJ;;AACE,kCAAA,GAAoC;IAC3C,EAAE,IAAA,EAAM,UAAA,EAAW;CAClB,CAAC;;;;AAED,sCAAA,GAAA,MAAA,EAGA,CAAC;;;;;;;;;;ICuFF,YAnBsB,KAAO,EAClB,QAAU,EACV,EAAI,EAoBX,EAnBI,EAoBJ,SAnBW;QAJO,UAAA,GAAA,KAAA,CAAO;QAClB,aAAA,GAAA,QAAA,CAAU;QACV,OAAA,GAAA,EAAA,CAAI;;;;QAxDf,YAHI,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA;QAID,kBAAa,GAHG,IAAA,CAAK,KAAC,CAAK,WAAC,CAAW;QAIvC,YAAO,GAHG,IAAA,CAAK,KAAC,CAAK,KAAC,CAAK;QAI3B,WAAM,GAHG,IAAA,CAAK,KAAC,CAAK,IAAC,CAAI;;;;QAqD5B,eAVI,GAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA;;;;QAcJ,YAXI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;QAeJ,aAZI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;QAgBJ,aAbI,GAAA,IAAA,YAAA,EAAA,CAAA;QA0BA,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,YAAY,CAAC;KACtC;;;;;;IAnEH,IANG,YAAA,CAAA,UAAA;;;;QAUH,MAPK,MAAA,GAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,CAAA;QASD,IAAI,MAPC,EAAO;YAQV,IAAI,CAPC,WAAC,GAAa,MAAA,CAAO;;YAU1B,IAAI,CAPC,QAAC,CAAQ,WAAC,CAAW,IAAC,CAAI,EAAC,EAAG,KAAA,GAAQ,IAAA,CAAK,WAAC,CAAW,CAAC;;YAU7D,IAAI,CAPC,QAAC,CAAQ,QAAC,CAAQ,IAAC,CAAI,EAAC,EAAG,KAAA,GAAQ,MAAA,CAAO,IAAC,CAAI,IAAC,CAAI,CAAC;;YAU1D,IAAI,CAPC,WAAC,GAAa,MAAA,CAAO,IAAC,CAAI,IAAC,CAAI;;YAUpC,IAAI,CAPC,QAAC,EAAQ,CAAE;SAQjB;aAPM;YAQL,MAPM,IAAI,KAAA,CAAM,qCAAC,UAAqC,yDAAU,CAAyD,CAAC;SAQ3H;KACF;;;;;;IAMH,IATG,KAAA,CAAA,GAAA;;QAYC,IAAI,GATC,KAAO,IAAA,CAAK,GAAC,EAAI;YAUpB,IAAI,CATC,GAAC,GAAK,IAAA,CAAK,WAAC,CAAW,GAAC,CAAG,CAAC;YAUjC,IAAI,CATC,QAAC,EAAQ,CAAE;SAUjB;KACF;;;;;IAoCH,OApBG;;QAsBC,IAAI,CApBC,IAAC,CAAI,GAAC,EAAI;YAqBb,IAAI,CApBC,GAAC,GAAK,kBAAA,CAAmB,IAAC,CAAI,MAAC,CAAM,QAAC,CAAQ,IAAC,CAAI,CAAC;SAqB1D;;;;QAIL,MArBK,QAAA,GAAA,IAAA,CAAA,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,EAAA;YAsBC,KAAK,EAAE,IAAI,CAAC,OAAO;YACnB,WAAW,EAAE,IAAI,CAAC,aAAa;YAC/B,KAAK,EAAE,IAAI,CAAC,OAAO;YACnB,IAAI,EAAE,IAAI,CAAC,MAAM;YACjB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YAChC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc;YAC9B,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;;QAGH,IAAI,IArBC,CAAI,UAAC,IAAa,OAAO,EAAA,KAAO,WAAA,EAAa;YAsBhD,EAAE,CArBC,MAAC,EAAO,QAAA,EAAU,IAAA,CAAK,WAAC,CAAW,IAAC,CAAI,IAAC,EAAK,OAAA,EAAS,IAAA,CAAK,GAAC,CAAG,CAAC;SAsBrE;QAED,qBArBI,KAAA,CAAM;QAsBV,IAAI,QArBC,EAAS;;YAuBZ,KAAK,GArBG,IAAA,CAAK,MAAC,CAAM,IAAC,CAAI,QAAC,EAAS,WAAA,EAAa,IAAA,CAAK,KAAC,CAAK,UAAC,CAAU,CAAC;SAsBxE;;QAGD,IAAI,CArBC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,WAAC,CAAW,IAAC,CAAI,IAAC,CAAI,CAAC;;QAwB/C,IAAI,IArBC,CAAI,QAAC,CAAQ,SAAC,CAAS,MAAC,IAAS,KAAA,EAAO;YAsB3C,uBArBM,SAAA,GAAY,IAAA,CAAK,MAAC,CAAM,WAAC,CAAW;gBAsBxC,IAAI,KArBC,CAAK,MAAC,EAAO;oBAsBhB,IAAI,CArBC,MAAC,CAAM,aAAC,CAAa,SAAC,CAAS,CAAC;oBAsBrC,IAAI,CArBC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,WAAC,CAAW,IAAC,CAAI,IAAC,CAAI,CAAC;iBAsBhD;aACF,EArBE,GAAA,CAAI,CAAC;SAsBT;KAEF;;;;IAIH,QAvBG;;QAyBC,IAAI,IAvBC,CAAI,GAAC,IAAM,IAAA,CAAK,OAAC,CAAO,SAAC,CAAS,MAAC,IAAS,IAAA,CAAK,WAAC,CAAW,IAAC,CAAI,YAAC,EAAa;;YA0BnF,IAAI,CAvBC,WAAC,CAAW,KAAC,CAAK,IAAC,CAAI,GAAC,CAAG,CAAC,SAAC,CAAS,CAAC,KAAO,KAAW,IAAA,CAAK,OAAC,CAAO,IAAC,CAAI,KAAC,CAAK,CAAC,CAAC;SAwBzF;KACF;;;;;IAKH,WA1BG,CAAA,GAAA;;QA6BC,IAAI,GA1BC,EAAI;YA2BP,uBA1BM,CAAA,GAAI,+EAAA,CAAgF;YA4B1F,IAAI,CA1BC,CAAC,IAAC,CAAI,GAAC,CAAG,EAAE;gBA2Bf,OA1BO,kBAAA,CAAmB,GAAC,CAAG,CAAC;aA2BhC;YACD,OAAO,CA1BC,IAAC,CAAI,kCAAC,GAAkC,eAAG,CAAe,CAAC;SA2BpE;;QAED,OA1BO,kBAAA,CAAmB,IAAC,CAAI,MAAC,CAAM,QAAC,CAAQ,IAAC,CAAI,CAAC;KA2BtD;;AAxBI,+BAAA,GAAoC;IA2B3C,EA1BE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA2BvB,QAAQ,EA1BE,eAAA;aA2BX,EA1BC,EAAG;CA2BJ,CA1BC;;;;AAED,mCAAA,GAAA,MAAA;IA6BD,EAAC,IAAI,EAAE,mBAAmB,GAAG;IAC7B,EAAC,IAAI,EAAE,SAAS,GAAG;IACnB,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,uBAAuB,GAAG;CAChC,CAAC;AA3BK,mCAAA,GAAyD;IA6BhE,SAAS,EA5BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA6B5B,eAAe,EA5BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA6BlC,SAAS,EA5BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA6B5B,QAAQ,EA5BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA6B3B,cAAc,EA5BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,aAAE,EAAa,EAAG,EAAE;IA6B1D,OAAO,EA5BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA6B1B,YAAY,EA5BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA6B/B,SAAS,EA5BE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IA6B7B,UAAU,EA5BE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IA6B9B,UAAU,EA5BE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IA6B9B,SAAS,EA5BE,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,OAAE,EAAO,EAAG,EAAE;CA6BrD,CA5BC;;;;;;;;IC1LF,SAFG,CAAA,GAAA,EAAA,MAAA;QAIC,IAAI,OAFO,GAAA,KAAQ,QAAA,EAAU;YAG3B,GAAG,GAFG,CAAA,CAAE;SAGT;QAED,OAFO,UAAA,CAAW,GAAC,EAAI,MAAA,CAAO,CAAC;KAGhC;;AAAI,yBAAA,GAAoC;IAG3C,EAFE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA;gBAGlB,IAAI,EAFE,YAAA;aAGP,EAFC,EAAG;CAGJ,CAFC;;;;AAED,6BAAA,GAAA,MAAA,EAKA,CAAC;AAGF,AAUA;;;AAGA,AAhBC,MAAA,UAAA,GAAA,CAAA,GAAA,EAAA,MAAA;IAkBC,MAAM,EAAE,GAAG;QACT,EAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAC;QAC1B,EAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAC;QAC1B,EAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAC;QAC1B,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC;QACzB,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC;QACzB,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC;KAC1B,EAAE,EAAE,GAAG,0BAA0B,CAAC;IAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAClC,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;YACtB,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;SAC7E;KACF;IACD,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;CAC9C;;AChDD;;;;;;AAMA,+BALC,UAAA,EAAA,OAAA,EAAA,WAAA;IAMC,OALO,IAAI,mBAAA,CAAoB,UAAC,EAAW,OAAA,EAAS,WAAA,CAAY,CAAC;CAMlE;AACD;;;;;;IAMA,OARG,OAAA,CAAA,OAAA,EAAA,WAAA;QASC,OARO;YASL,QAAQ,EARE,oBAAA;YASV,SAAS,EARE;gBAST,EAAC,OARC,EAAQ,OAAA,EAAS,QAAA,EAAU,OAAA,EAAQ;gBASrC,EAAC,OARC,EAAQ,YAAA,EAAc,QAAA,EAAU,WAAA,EAAY;gBAS9C;oBACE,OAAO,EARE,mBAAA;oBAST,UAAU,EAREA,qBAAA;oBASZ,IAAI,EARE,CAAA,UAAE,EAAW,OAAA,EAAS,YAAA,CAAa;iBAS1C;aACF;SACF,CARC;KASH;;AAPI,+BAAA,GAAoC;IAS3C,EARE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBAStB,YAAY,EARE;oBASZ,oBAAoB;oBACpB,cAAc;iBACf;gBACD,OAAO,EARE;oBASP,YAAY;iBACb;gBACD,OAAO,EARE;oBASP,YAAY;oBACZ,oBAAoB;oBALtB,cAAA;iBAOC;gBACD,SAAS,EARE,CAAE,uBAAA,CAAwB;aAStC,EARC,EAAG;CASJ,CARC;;;;AAED,mCAAA,GAAA,MAAA,EAWA,CAAC;;;;;;;ICoEF,YArBsB,EAAI,EAA2B,KAAO;QAAtC,OAAA,GAAA,EAAA,CAAI;QAA2B,UAAA,GAAA,KAAA,CAAO;;;;QAnD5D,aAPI,GAAA,IAAA,CAAA;;;;QAWJ,aARI,GAAA,KAAA,CAAA;;;;QAYJ,SATI,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;;;;QAaJ,cAVG,GAAA,KAAA,CAAA;;;;QA6CH,gBAfI,GAAA,eAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA;;;;QAmBJ,UAhBI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;QAoBJ,WAjBI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;QAqBJ,WAlBI,GAAA,IAAA,YAAA,EAAA,CAAA;KAiCD;;;;;IAlGH,IAHG,YAAA,CAAA,MAAA;QAIC,IAAI,CAHC,UAAC,GAAY,CAAA,CAAE;QAIpB,IAAI,CAHC,MAAC,GAAQ,MAAA,CAAO;KAItB;;;;;;IAMH,IALG,MAAA,CAAA,MAAA;;QAOC,IAAI,CALC,UAAC,GAAY,CAAA,CAAE;QAMpB,IAAI,CALC,GAAC,GAAK,MAAA,CAAO;KAMnB;;;;;IA4BH,IAZG,YAAA,CAAA,IAAA;QAaC,IAAI,CAZC,SAAC,GAAW,IAAA,CAAK;;;QAgBtB,IAAI,CAZC,IAAC,CAAI,cAAC,CAAc,OAAC,CAAO,SAAC,CAAS,MAAC,EAAO;;YAejD,IAAI,IAZC,CAAI,SAAC,IAAY,IAAA,CAAK,KAAC,CAAK,SAAC,CAAS,MAAC,EAAO;gBAajD,IAAI,CAZC,cAAC,CAAc,OAAC,CAAO,SAAC,CAAS,KAAC;oBAarC,IAAI,CAZC,UAAC,GAAY,KAAA,CAAM;oBAaxB,IAAI,CAZC,KAAC,CAAK,IAAC,CAAI,KAAC,CAAK,CAAC;oBAavB,IAAI,CAZC,EAAC,CAAE,YAAC,EAAY,CAAE;iBAaxB,CAZC,CAAC;aAaJ;SAEF;KAEF;;;;;;IAMH,IAdG,QAAA,CAAA,KAAA;QAeC,IAAI,CAdC,WAAC,GAAa,eAAA,GAAkB,KAAA,CAAM;KAe5C;;;;IAmCH,WAxBG;QAyBC,IAAI,CAxBC,cAAC,CAAc,OAAC,CAAO,QAAC,EAAQ,CAAE;KAyBxC;;AAtBI,+BAAA,GAAoC;IAyB3C,EAxBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAyBvB,QAAQ,EAxBE,cAAA;gBAyBV,QAAQ,EAxBE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsET;gBACD,eAAe,EAxBE,uBAAA,CAAwB,MAAC;aAyB3C,EAxBC,EAAG;CAyBJ,CAxBC;;;;AAED,mCAAA,GAAA,MAAA;IA2BD,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,mBAAmB,GAAG;CAC5B,CAAC;AAzBK,mCAAA,GAAyD;IA2BhE,cAAc,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,QAAE,EAAQ,EAAG,EAAE;IA2BrD,QAAQ,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,KAAE,EAAK,EAAG,EAAE;IA2B5C,OAAO,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA2B1B,aAAa,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA2BhC,OAAO,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA2B1B,MAAM,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA2BzB,UAAU,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA2B7B,UAAU,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA2B7B,MAAM,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA2BzB,cAAc,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,WAAE,EAAW,EAAG,EAAE;IA2BxD,UAAU,EA1BE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,OAAE,EAAO,EAAG,EAAE;IA2BhD,aAAa,EA1BE,CAAA,EAAG,IAAA,EAAM,WAAA,EAAa,IAAA,EAAM,CAAA,OAAE,EAAO,EAAG,EAAE;IA2BzD,OAAO,EA1BE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IA2B3B,QAAQ,EA1BE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IA2B5B,QAAQ,EA1BE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IA2B5B,gBAAgB,EA1BE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,oBAAE,EAAoB,EAAG,EAAE;IA2BvE,UAAU,EA1BE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,UAAE,EAAU,EAAG,EAAE;CA2BtD,CA1BC;;ACtLF;;;;;;AAMA,+BALC,UAAA,EAAA,OAAA,EAAA,WAAA;IAMC,OALO,IAAI,mBAAA,CAAoB,UAAC,EAAW,OAAA,EAAS,WAAA,CAAY,CAAC;CAMlE;AACD;;;;;;IAMA,OARG,OAAA,CAAA,OAAA,EAAA,WAAA;QASC,OARO;YASL,QAAQ,EARE,iBAAA;YASV,SAAS,EARE;gBAST,EAAC,OARC,EAAQ,OAAA,EAAS,QAAA,EAAU,OAAA,EAAQ;gBASrC,EAAC,OARC,EAAQ,YAAA,EAAc,QAAA,EAAU,WAAA,EAAY;gBAS9C;oBACE,OAAO,EARE,mBAAA;oBAST,UAAU,EAREA,qBAAA;oBASZ,IAAI,EARE,CAAA,UAAE,EAAW,OAAA,EAAS,YAAA,CAAa;iBAS1C;aACF;SACF,CARC;KASH;;AAPI,4BAAA,GAAoC;IAS3C,EARE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBAStB,YAAY,EARE;oBASZ,oBAAoB;iBACrB;gBACD,OAAO,EARE;oBASP,oBAAoB;iBACrB;gBACD,OAAO,EARE;oBAGT,oBAAA;oBAOE,oBAAoB;iBACrB;aACF,EARC,EAAG;CASJ,CARC;;;;AAED,gCAAA,GAAA,MAAA,EAWA,CAAC;;;;;;;ICoHF,YAlCsB,EAAI,EAA0B,KAAO;QAArC,OAAA,GAAA,EAAA,CAAI;QAA0B,UAAA,GAAA,KAAA,CAAO;;;;QA9G3D,YADG,GAAA,EAAA,CAAA;;;;QAKH,mBAFG,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA;;;;QAMH,mBAHG,GAAA,EAAA,CAAA;;;;QAuBH,iBARG,GAAA,IAAA,CAAA,cAAA,CAAA,MAAA,CAAA;;;;QAgBH,YAZG,GAAA,KAAA,CAAA;;;;QA2CH,aAlBI,GAAA,IAAA,CAAA;;;;QAsBJ,aAnBI,GAAA,KAAA,CAAA;;;;QA2BJ,cArBG,GAAA,KAAA,CAAA;;;;QAiEH,mBA3BI,GAAA,cAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA;;;;QA+BJ,UA5BI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;QAgCJ,WA7BI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;QAiCJ,WA9BI,GAAA,IAAA,YAAA,EAAA,CAAA;KA0CD;;;;;IAtIH,IALG,OAAA,CAAA,cAAA;QAMC,IAAI,CALC,cAAC,GAAgB,cAAA,CAAe;QAMrC,IAAI,CALC,OAAC,GAAS,IAAA,CAAK,cAAC,CAAc,MAAC,CAAM,CAAC,GAAC,KAAO,IAAA,CAAK,cAAC,CAAc,OAAC,CAAO,GAAC,CAAG,GAAG,CAAA,CAAE,CAAC;KAM1F;;;;;IAKH,IAPG,OAAA,CAAA,cAAA;QAQC,IAAI,CAPC,cAAC,GAAgB,cAAA,CAAe;QAQrC,IAAI,CAPC,OAAC,GAAS,IAAA,CAAK,cAAC,CAAc,MAAC,CAAM,CAAC,GAAC,KAAO,IAAA,CAAK,cAAC,CAAc,OAAC,CAAO,GAAC,CAAG,GAAG,CAAA,CAAE,CAAC;KAQ1F;;;;;IAiBH,IAdG,eAAA,CAAA,UAAA;QAeC,IAAI,CAdC,YAAC,GAAc,UAAA,CAAW;QAe/B,IAAI,CAdC,YAAC,GAAc,IAAA,CAAK,OAAC,CAAO,MAAC,CAAM;;QAgBxC,IAAI,CAdC,OAAC,GAAS,IAAA,CAAK,YAAC,KAAgB,IAAA,CAAK,YAAC,GAAc,CAAA,CAAE;KAe5D;;;;;;IAMH,IAhBG,MAAA,CAAA,MAAA;;QAkBC,IAAI,CAhBC,UAAC,GAAY,CAAA,CAAE;QAiBpB,IAAI,CAhBC,GAAC,GAAK,MAAA,CAAO;KAiBnB;;;;;IA4BH,IAvBG,YAAA,CAAA,IAAA;QAwBC,IAAI,CAvBC,SAAC,GAAW,IAAA,CAAK;QAyBtB,IAAI,IAvBC,CAAI,eAAC,EAAgB;;YAyBxB,IAAI,CAvBC,eAAC,CAAe,OAAC,CAAO,CAAC,cAAgB;;gBA0B5C,IAAI,CAvBC,cAAC,CAAc,KAAC,CAAK,SAAC,CAAS,MAAC,EAAO;;oBA0B1C,IAAI,IAvBC,IAAO,IAAA,CAAK,KAAC,CAAK,SAAC,CAAS,MAAC,EAAO;wBAwBvC,cAAc,CAvBC,KAAC,CAAK,SAAC,CAAS,KAAC;4BAwB9B,IAAI,CAvBC,UAAC,GAAY,KAAA,CAAM;4BAwBxB,IAAI,CAvBC,KAAC,CAAK,IAAC,CAAI,KAAC,CAAK,CAAC;4BAwBvB,IAAI,CAvBC,EAAC,CAAE,YAAC,EAAY,CAAE;yBAwBxB,CAvBC,CAAC;qBAwBJ;iBACF;aACF,CAvBC,CAAC;SAwBJ;KACF;;;;;IASH,IA1BG,QAAA,CAAA,KAAA;;QA4BC,IAAI,CA1BC,KAAC,GAAO,KAAA,CAAM;;QA4BnB,IAAI,CA1BC,cAAC,GAAgB,cAAA,GAAiB,KAAA,CAAM;KA2B9C;;;;IAgCH,QArCG;;QAuCC,IAAI,CArCC,IAAC,CAAI,cAAC,CAAc,MAAC,EAAO;YAsC/B,IAAI,CArCC,OAAC,GAAS,IAAA,CAAK,cAAC,CAAc,MAAC,CAAM,CAAC,GAAC,KAAO,IAAA,CAAK,cAAC,CAAc,OAAC,CAAO,GAAC,CAAG,GAAG,CAAA,CAAE,CAAC;SAsC1F;KACF;;;;IAIH,WAvCG;QAwCC,IAAI,CAvCC,eAAC,CAAe,OAAC,CAAO,CAAC,cAAgB;YAwC5C,cAAc,CAvCC,KAAC,CAAK,WAAC,EAAW,CAAE;SAwCpC,CAvCC,CAAC;KAwCJ;;;;IAIH,IAzCG;QA0CC,IAAI,CAzCC,YAAC,GAAc,IAAA,CAAK,YAAC,CAAY;QA0CtC,IAAI,CAzCC,YAAC,GAAc,IAAA,CAAK,OAAC,CAAO,MAAC,CAAM;QA0CxC,IAAI,CAzCC,OAAC,GAAS,IAAA,CAAK;KA0CrB;;;;IAIH,IA3CG;QA4CC,IAAI,CA3CC,YAAC,GAAc,IAAA,CAAK,YAAC,CAAY;QA4CtC,IAAI,CA3CC,OAAC,GAAS,KAAA,CAAM;KA4CtB;;AAzCI,gCAAA,GAAoC;IA4C3C,EA3CE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA4CvB,QAAQ,EA3CE,eAAA;gBA4CV,QAAQ,EA3CE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuFT;gBACD,eAAe,EA3CE,uBAAA,CAAwB,MAAC;aA4C3C,EA3CC,EAAG;CA4CJ,CA3CC;;;;AAED,oCAAA,GAAA,MAAA;IA8CD,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,mBAAmB,GAAG;CAC5B,CAAC;AA5CK,oCAAA,GAAyD;IA8ChE,SAAS,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,SAAE,EAAS,EAAG,EAAE;IA8CjD,SAAS,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,SAAE,EAAS,EAAG,EAAE;IA8CjD,iBAAiB,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,MAAE,EAAM,EAAG,EAAE;IA8CtD,QAAQ,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,KAAE,EAAK,EAAG,EAAE;IA8C5C,OAAO,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA8C1B,aAAa,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA8ChC,OAAO,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA8C1B,MAAM,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA8CzB,UAAU,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA8C7B,UAAU,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA8C7B,MAAM,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IA8CzB,cAAc,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,WAAE,EAAW,EAAG,EAAE;IA8CxD,UAAU,EA7CE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,OAAE,EAAO,EAAG,EAAE;IA8ChD,gBAAgB,EA7CE,CAAA,EAAG,IAAA,EAAM,WAAA,EAAa,IAAA,EAAM,CAAA,OAAE,EAAO,EAAG,EAAE;IA8C5D,OAAO,EA7CE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IA8C3B,QAAQ,EA7CE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IA8C5B,QAAQ,EA7CE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IA8C5B,iBAAiB,EA7CE,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,oBAAE,EAAoB,EAAG,EAAE;CA8C1E,CA7CC;;ACvOF;;;;;;AAMA,6BALC,UAAA,EAAA,OAAA,EAAA,WAAA;IAMC,OALO,IAAI,mBAAA,CAAoB,UAAC,EAAW,OAAA,EAAS,WAAA,CAAY,CAAC;CAMlE;AACD;;;;;;IAMA,OARG,OAAA,CAAA,OAAA,EAAA,WAAA;QASC,OARO;YASL,QAAQ,EARE,kBAAA;YASV,SAAS,EARE;gBAST,EAAC,OARC,EAAQ,OAAA,EAAS,QAAA,EAAU,OAAA,EAAQ;gBASrC,EAAC,OARC,EAAQ,YAAA,EAAc,QAAA,EAAU,WAAA,EAAY;gBAS9C;oBACE,OAAO,EARE,mBAAA;oBAST,UAAU,EARE,mBAAA;oBASZ,IAAI,EARE,CAAA,UAAE,EAAW,OAAA,EAAS,YAAA,CAAa;iBAS1C;aACF;SACF,CARC;KASH;;AAPI,6BAAA,GAAoC;IAS3C,EARE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBAStB,YAAY,EARE;oBASZ,qBAAqB;iBACtB;gBACD,OAAO,EARE;oBASP,iBAAiB;iBAClB;gBACD,OAAO,EARE;oBAGT,iBAAA;oBAOE,qBAAqB;iBACtB;aACF,EARC,EAAG;CASJ,CARC;;;;AAED,iCAAA,GAAA,MAAA,EAWA,CAAC;;ACxDF;;GAEG;;;;"}