{"version":3,"file":"ngx-sharebuttons.umd.min.js","sources":["../../tmp/services/share-buttons.service.ts","../../tmp/modules/share-directive.module.ts","../../tmp/modules/share-button.module.ts","../../tmp/modules/share-buttons.module.ts","../../tmp/classes/facebook.class.ts","../../tmp/classes/twitter.class.ts","../../tmp/classes/linkedin.class.ts","../../tmp/classes/tumblr.class.ts","../../tmp/classes/whatsapp.class.ts","../../tmp/classes/pinterest.class.ts","../../tmp/classes/reddit.class.ts","../../tmp/classes/google.class.ts","../../tmp/classes/stumble.class.ts","../../tmp/classes/telegram.class.ts","../../tmp/classes/email.class.ts","../../tmp/classes/copy.class.ts","../../tmp/classes/print.class.ts","../../tmp/classes/vk.class.ts","../../tmp/classes/index.ts","../../tmp/modules/tokens.ts","../../tmp/services/universal-support.service.ts","../../tmp/directives/share-button.directive.ts","../../tmp/pipes/n-formatter.pipe.ts","../../tmp/components/share-button/share-button.component.ts","../../tmp/components/share-buttons/share-buttons.component.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport {\n  FacebookButton,\n  TwitterButton,\n  GoogleButton,\n  PinterestButton,\n  TumblrButton,\n  EmailButton,\n  PrintButton,\n  LinkedinButton,\n  VKontakteButton,\n  StumbleButton,\n  RedditButton,\n  WhatsappButton,\n  TelegramButton,\n  CopyButton,\n  Buttons\n} from '../classes/index';\nimport { BUTTONS_META, OPTIONS } from '../modules/tokens';\nexport class ShareButtonsService {\n/**\n * All buttons\n */\nallButtons = [\n    'facebook',\n    'twitter',\n    'linkedin',\n    'pinterest',\n    'google',\n    'stumble',\n    'reddit',\n    'whatsapp',\n    'tumblr',\n    'vk',\n    'telegram',\n    'email',\n    'copy',\n    'print'\n  ];\n/**\n * Default options\n */\noptions: ShareButtonsOptions = {\n    theme: 'default',\n    dialogWidth: 500,\n    dialogHeight: 400,\n    include: this.allButtons,\n    exclude: [],\n    size: 0,\n    title: null,\n    image: null,\n    description: null,\n    tags: null,\n    gaTracking: false,\n    twitterAccount: null\n  };\n/**\n * Button's meta data such as icon,color and text of each button\n */\nmeta: ShareButtonsMeta = Buttons;\n/**\n * @param {?} http\n * @param {?} options\n * @param {?} meta\n */\nconstructor(private http: HttpClient,\n     options: ShareButtonsOptions,\n     meta: ShareButtonsMeta) {\n\n    /** Override global options with user's preference */\n    this.options = mergeDeep(this.options, options);\n    this.meta = mergeDeep(this.meta, meta);\n  }\n/**\n * @return {?}\n */\nget twitterAccount() {\n    return this.options.twitterAccount;\n  }\n/**\n * @return {?}\n */\nget dialogSize() {\n    return `width=${this.options.dialogWidth}, height=${this.options.dialogHeight}`;\n  }\n/**\n * Get all wanted buttons\n * @return {?}\n */\nget buttons() {\n    if (!this.options.exclude.length) {\n      return this.options.include;\n    }\n    return this.options.include.filter((btn) => this.options.exclude.indexOf(btn) < 0);\n  }\n/**\n * @return {?}\n */\nget theme() {\n    return this.options.theme;\n  }\n/**\n * Global meta tags\n * @return {?}\n */\nget title() {\n    return this.options.title;\n  }\n/**\n * @return {?}\n */\nget description() {\n    return this.options.description;\n  }\n/**\n * @return {?}\n */\nget image() {\n    return this.options.image;\n  }\n/**\n * @return {?}\n */\nget tags() {\n    return this.options.tags;\n  }\n/**\n * @return {?}\n */\nget gaTracking() {\n    return this.options.gaTracking;\n  }\n/**\n * @return {?}\n */\nget size() {\n    return this.options.size;\n  }\n/**\n * @param {?} buttonName\n * @return {?}\n */\ncreateShareButton(buttonName: string) {\n\n    switch (buttonName.toLowerCase()) {\n      case this.meta.facebook.type:\n        return new FacebookButton(this.meta.facebook, this.http);\n      case this.meta.twitter.type:\n        return new TwitterButton(this.meta.twitter);\n      case this.meta.google.type:\n        return new GoogleButton(this.meta.google, this.http);\n      case this.meta.pinterest.type:\n        return new PinterestButton(this.meta.pinterest, this.http);\n      case this.meta.linkedin.type:\n        return new LinkedinButton(this.meta.linkedin, this.http);\n      case this.meta.reddit.type:\n        return new RedditButton(this.meta.reddit, this.http);\n      case this.meta.tumblr.type:\n        return new TumblrButton(this.meta.tumblr, this.http);\n      case this.meta.stumble.type:\n        return new StumbleButton(this.meta.stumble);\n      case this.meta.whatsapp.type:\n        return new WhatsappButton(this.meta.whatsapp);\n      case this.meta.vk.type:\n        return new VKontakteButton(this.meta.vk);\n      case this.meta.telegram.type:\n        return new TelegramButton(this.meta.telegram);\n      case this.meta.email.type:\n        return new EmailButton(this.meta.email);\n      case this.meta.copy.type:\n        return new CopyButton(this.meta.copy);\n      case this.meta.print.type:\n        return new PrintButton(this.meta.print);\n      default:\n        return null;\n    }\n  }\n/**\n * Determine the mobile operating system.\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\n * \n * @return {?}\n */\ngetMobileOS() {\n    // const userAgent = navigator.userAgent || navigator.vendor || (window || global).opera;\n\n    // Windows Phone must come first because its UA also contains \"Android\"\n    // if (/windows phone/i.test(userAgent)) {\n    //   return 'WindowsPhone';\n    // }\n\n    // if (/android/i.test(userAgent)) {\n    //   return 'Android';\n    // }\n\n    // iOS detection from: http://stackoverflow.com/a/9039885/177710\n    // if (/iPad|iPhone|iPod/.test(userAgent) && !(window || global).MSStream) {\n    //   return 'iOS';\n    // }\n\n    return undefined;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: undefined, decorators: [{ type: Inject, args: [OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [BUTTONS_META, ] }, ]},\n];\n}\n\nfunction ShareButtonsService_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonsService.ctorParameters;\n/**\n * All buttons\n * @type {?}\n */\nShareButtonsService.prototype.allButtons;\n/**\n * Default options\n * @type {?}\n */\nShareButtonsService.prototype.options;\n/**\n * Button's meta data such as icon,color and text of each button\n * @type {?}\n */\nShareButtonsService.prototype.meta;\n/** @type {?} */\nShareButtonsService.prototype.http;\n}\n\n/**\n * Simple object check.\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * Deep merge two objects.\n * @param {?} target\n * @param {...?} sources\n * @return {?}\n */\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const /** @type {?} */ source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const /** @type {?} */ key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonDirective } from '../directives/share-button.directive';\nimport { NFormatterPipe } from '../pipes/n-formatter.pipe';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { UniversalSupportService } from '../services/universal-support.service';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n/**\n * @param {?} httpClient\n * @param {?} options\n * @param {?} buttonsMeta\n * @return {?}\n */\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\nexport class ShareDirectiveModule {\n/**\n * @param {?=} options\n * @param {?=} buttonsMeta\n * @return {?}\n */\nstatic forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareDirectiveModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CommonModule,\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  providers: [ UniversalSupportService ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareDirectiveModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShareDirectiveModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareDirectiveModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ShareDirectiveModule } from './share-directive.module';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonComponent } from '../components/share-button/share-button.component';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n/**\n * @param {?} httpClient\n * @param {?} options\n * @param {?} buttonsMeta\n * @return {?}\n */\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\nexport class ShareButtonModule {\n/**\n * @param {?=} options\n * @param {?=} buttonsMeta\n * @return {?}\n */\nstatic forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareButtonModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShareButtonComponent\n  ],\n  imports: [\n    ShareDirectiveModule\n  ],\n  exports: [\n    ShareDirectiveModule,\n    ShareButtonComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, InjectionToken } from '@angular/core';\n\nimport { ShareButtonModule } from './share-button.module';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonsComponent } from '../components/share-buttons/share-buttons.component';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n/**\n * @param {?} httpClient\n * @param {?} options\n * @param {?} buttonsMeta\n * @return {?}\n */\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\nexport class ShareButtonsModule {\n/**\n * @param {?=} options\n * @param {?=} buttonsMeta\n * @return {?}\n */\nstatic forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareButtonsModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShareButtonsComponent\n  ],\n  imports: [\n    ShareButtonModule\n  ],\n  exports: [\n    ShareButtonModule,\n    ShareButtonsComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareButtonsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonsModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport {IShareButton, ShareButtonArgs, ShareButtonProp} from '../models/share-buttons.models';\nexport class FacebookButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n    let /** @type {?} */ shareUrl =  this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&quote=' + args.title;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.get<ICount>(this.prop.countUrl + url)\n      .filter(res => !!(res.share && res.share.share_count))\n      .map(res => +res.share.share_count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction FacebookButton_tsickle_Closure_declarations() {\n/** @type {?} */\nFacebookButton.prototype.prop;\n/** @type {?} */\nFacebookButton.prototype.http;\n}\n\n\n/** Facebook Count interface */\n\ninterface Share {\n  comment_count: number;\n  share_count: number;\n}\n\ninterface OgObject {\n  id: string;\n  description: string;\n  title: string;\n  type: string;\n  updated_time: Date;\n}\n\ninterface ICount {\n  share: Share;\n  og_object: OgObject;\n  id: string;\n}\n","/** TWITTER DOCS: https://dev.twitter.com/web/tweet-button/web-intent */\n\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class TwitterButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&text=' + args.description;\n    }\n\n    if (args.via) {\n      shareUrl += '&via=' + args.via;\n    }\n\n    if (args.tags) {\n      shareUrl += '&hashtags=' + args.tags;\n    }\n\n    return shareUrl;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction TwitterButton_tsickle_Closure_declarations() {\n/** @type {?} */\nTwitterButton.prototype.prop;\n}\n\n","/** LINKEDIN DOCS https://developer.linkedin.com/docs/share-on-linkedin#! */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class LinkedinButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&title=' + args.title;\n    }\n    if (args.description) {\n      shareUrl += '&summary=' + args.description;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.jsonp<ICount>(this.prop.countUrl + url, 'callback')\n      .filter(res => !!res.count)\n      .map(res => +res.count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction LinkedinButton_tsickle_Closure_declarations() {\n/** @type {?} */\nLinkedinButton.prototype.prop;\n/** @type {?} */\nLinkedinButton.prototype.http;\n}\n\n\n/** LinkedIn count interface */\n\nexport interface ICount {\n  count: number;\n  fCnt: string;\n  fCntPlusOne: string;\n  url: string;\n}\n","/** TUMBLR DOCS: https://www.tumblr.com/docs/en/share_button */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class TumblrButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&caption=' + args.description;\n    }\n\n    if (args.tags) {\n      shareUrl += '&tags=' + args.tags;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.jsonp<ICount>(this.prop.countUrl + url, 'callback')\n      .filter(res => !!(res.response && res.response.note_count))\n      .map(res => +res.response.note_count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction TumblrButton_tsickle_Closure_declarations() {\n/** @type {?} */\nTumblrButton.prototype.prop;\n/** @type {?} */\nTumblrButton.prototype.http;\n}\n\n\n/** Tumblr count interface*/\n\ninterface Meta {\n  status: number;\n  msg: string;\n}\n\ninterface Response {\n  url: string;\n  note_count: number;\n}\n\ninterface ICount {\n  meta: Meta;\n  response: Response;\n}\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class WhatsappButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl;\n\n    if (args.description) {\n      shareUrl += args.description + ' %0A';\n    }\n\n    return shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction WhatsappButton_tsickle_Closure_declarations() {\n/** @type {?} */\nWhatsappButton.prototype.prop;\n}\n\n","import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class PinterestButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    /** The description and the image are required to get the pin button to work. */\n\n    if (args.description) {\n      shareUrl += '&description=' + args.description;\n    } else if (document) {\n/**\n * If user didn't add description, get it from the OG meta tag\n */\nconst ogDescription: Element = document.querySelector('meta[property=\"og:description\"]');\n      if (ogDescription) {\n        shareUrl += '&description=' + ogDescription.getAttribute('content');\n      } else {\n        console.warn('[ShareButtons]: You didn\\'t set the description text for Pinterest button');\n      }\n    }\n\n    if (args.image) {\n      shareUrl += '&media=' + args.image;\n    } else if (document) {\n      const /** @type {?} */ ogImage: Element = document.querySelector('meta[property=\"og:image\"]');\n      if (ogImage) {\n        shareUrl += '&media=' + ogImage.getAttribute('content');\n      } else {\n        console.warn('[ShareButtons]: You didn\\'t set the image URL for Pinterest button');\n      }\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.get(this.prop.countUrl + url, {responseType: 'text'})\n      .map(text => /** @type {?} */(( <ICount>JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1')))))\n      .filter(res => !!res.count)\n      .map(res => +res.count)\n      .catch(err => Observable.empty());\n  }\n\n}\n\nfunction PinterestButton_tsickle_Closure_declarations() {\n/** @type {?} */\nPinterestButton.prototype.prop;\n/** @type {?} */\nPinterestButton.prototype.http;\n}\n\n\n/** Pinterest count interface */\n\ninterface ICount {\n  url: string;\n  count: number;\n}\n","/** REDDIT DOCS: http://stackoverflow.com/questions/24823114/post-to-reddit-via-url */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class RedditButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&title=' + args.title;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.get<ICount>(this.prop.countUrl + url)\n      .filter(res => !!(res.data && res.data.children && res.data.children.length))\n      .map(res => +res.data.children[0].data.score)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction RedditButton_tsickle_Closure_declarations() {\n/** @type {?} */\nRedditButton.prototype.prop;\n/** @type {?} */\nRedditButton.prototype.http;\n}\n\n\n\n/** Reddit count interface */\n\ninterface Source {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface Resolution {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface Image {\n  source: Source;\n  resolutions: Resolution[];\n  id: string;\n}\n\ninterface Preview {\n  images: Image[];\n  enabled: boolean;\n}\n\ninterface Data2 {\n  domain: string;\n  approved_at_utc?: any;\n  banned_by?: any;\n  thumbnail_width: number;\n  subreddit: string;\n  selftext_html?: any;\n  selftext: string;\n  likes?: any;\n  suggested_sort?: any;\n  user_reports: any[];\n  secure_media?: any;\n  link_flair_text?: any;\n  id: string;\n  banned_at_utc?: any;\n  view_count?: any;\n  archived: boolean;\n  clicked: boolean;\n  report_reasons?: any;\n  title: string;\n  media?: any;\n  mod_reports: any[];\n  can_mod_post: boolean;\n  author_flair_text?: any;\n  score: number;\n  approved_by?: any;\n  over_18: boolean;\n  hidden: boolean;\n  preview: Preview;\n  thumbnail: string;\n  subreddit_id: string;\n  edited: boolean;\n  link_flair_css_class?: any;\n  author_flair_css_class?: any;\n  contest_mode: boolean;\n  gilded: number;\n  downs: number;\n  brand_safe: boolean;\n  saved: boolean;\n  removal_reason?: any;\n  post_hint: string;\n  stickied: boolean;\n  can_gild: boolean;\n  thumbnail_height: number;\n  parent_whitelist_status?: any;\n  name: string;\n  spoiler: boolean;\n  permalink: string;\n  subreddit_type: string;\n  locked: boolean;\n  hide_score: boolean;\n  created: number;\n  url: string;\n  whitelist_status?: any;\n  quarantine: boolean;\n  author: string;\n  created_utc: number;\n  subreddit_name_prefixed: string;\n  ups: number;\n  num_comments: number;\n  is_self: boolean;\n  visited: boolean;\n  num_reports?: any;\n  is_video: boolean;\n  distinguished?: any;\n}\n\ninterface Child {\n  kind: string;\n  data: Data2;\n}\n\ninterface Data {\n  modhash: string;\n  children: Child[];\n  after?: any;\n  before?: any;\n}\n\ninterface ICount {\n  kind: string;\n  data: Data;\n}\n","/** GPLUS DOCS: https://developers.google.com/+/web/share/#sharelink */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\nexport class GoogleButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nlink(url: string) {\n    return this.prop.shareUrl + url;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return Observable.empty();\n  }\n}\n\nfunction GoogleButton_tsickle_Closure_declarations() {\n/** @type {?} */\nGoogleButton.prototype.prop;\n/** @type {?} */\nGoogleButton.prototype.http;\n}\n\n","/** STUMBLE DOCS: http://stackoverflow.com/questions/10591424/how-can-i-create-a-custom-stumbleupon-button */\n\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class StumbleButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nlink(url: string) {\n\n    return this.prop.shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n}\n\nfunction StumbleButton_tsickle_Closure_declarations() {\n/** @type {?} */\nStumbleButton.prototype.prop;\n}\n\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class TelegramButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&text=' + args.description;\n    }\n\n    return shareUrl;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction TelegramButton_tsickle_Closure_declarations() {\n/** @type {?} */\nTelegramButton.prototype.prop;\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/Observable';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class EmailButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + args.email;\n\n    if (args.title) {\n      shareUrl += '&subject=' + args.title;\n    }\n\n    shareUrl += '&body=';\n    if (args.description) {\n      shareUrl += args.description + ' %0A';\n    }\n\n    return shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction EmailButton_tsickle_Closure_declarations() {\n/** @type {?} */\nEmailButton.prototype.prop;\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { ShareButtonDirective } from '../directives/share-button.directive';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/delay';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class CopyButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n    this.copyURLToClipboard(url, args.directive);\n    return null;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n/**\n * copy URL to clipboard\n * @param {?} url\n * @param {?} directive\n * @return {?}\n */\ncopyURLToClipboard(url: string, directive: ShareButtonDirective) {\n\n    const /** @type {?} */ temp = {text: directive.shareButton.prop.text, icon: directive.shareButton.prop.icon};\n    Observable.of({}).take(1).do(() => {\n        url = decodeURIComponent(url);\n        const /** @type {?} */ textArea = directive.renderer.createElement('textarea');\n\n        // Place in top-left corner of screen regardless of scroll position.\n        directive.renderer.setStyle(textArea, 'position', 'fixed');\n        directive.renderer.setStyle(textArea, 'top', 0);\n        directive.renderer.setStyle(textArea, 'left', 0);\n\n        // Ensure it has a small width and height. Setting to 1px / 1em\n        // doesn't work as directive gives a negative w/h on some browsers.\n        directive.renderer.setStyle(textArea, 'width', '2em');\n        directive.renderer.setStyle(textArea, 'height', '2em');\n\n        // We don't need padding, reducing the size if it does flash render\n        directive.renderer.setStyle(textArea, 'padding', 0);\n\n        // Clean up any borders.\n        directive.renderer.setStyle(textArea, 'border', 'none');\n        directive.renderer.setStyle(textArea, 'outline', 'none');\n        directive.renderer.setStyle(textArea, 'boxShadow', 'none');\n\n        // Avoid flash of white box if rendered for any reason.\n        directive.renderer.setStyle(textArea, 'background', 'transparent');\n        directive.renderer.setProperty(textArea, 'value', url);\n        directive.renderer.appendChild(directive.el, textArea);\n\n        textArea.select();\n\n        document.execCommand('copy');\n\n        directive.renderer.removeChild(directive.el, textArea);\n\n        directive.shareButton.prop.text = this.prop.successText;\n        directive.shareButton.prop.icon = this.prop.successIcon;\n        directive.cd.markForCheck();\n      },\n      () => {\n        directive.shareButton.prop.text = this.prop.failText;\n        directive.shareButton.prop.icon = this.prop.failIcon;\n        directive.cd.markForCheck();\n        console.warn('[ShareButtons]: Print button could not copy URL to clipboard');\n      })\n      .delay(2000)\n      .do(() => {\n        directive.shareButton.prop.text = temp.text;\n        directive.shareButton.prop.icon = temp.icon;\n        directive.cd.markForCheck();\n      })\n      .subscribe();\n\n  }\n\n}\n\nfunction CopyButton_tsickle_Closure_declarations() {\n/** @type {?} */\nCopyButton.prototype.prop;\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class PrintButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    args.directive.window.print();\n    return null;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction PrintButton_tsickle_Closure_declarations() {\n/** @type {?} */\nPrintButton.prototype.prop;\n}\n\n","/** VK DOCS: https://vk.com/dev/widget_share */\n\n\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class VKontakteButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n    return this.prop.shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n    return Observable.empty();\n  }\n\n}\n\nfunction VKontakteButton_tsickle_Closure_declarations() {\n/** @type {?} */\nVKontakteButton.prototype.prop;\n}\n\n","export {FacebookButton} from './facebook.class';\nexport {TwitterButton} from './twitter.class';\nexport {LinkedinButton,ICount} from './linkedin.class';\nexport {TumblrButton} from './tumblr.class';\nexport {WhatsappButton} from './whatsapp.class';\nexport {PinterestButton} from './pinterest.class';\nexport {RedditButton} from './reddit.class';\nexport {GoogleButton} from './google.class';\nexport {StumbleButton} from './stumble.class';\nexport {TelegramButton} from './telegram.class';\nexport {EmailButton} from './email.class';\nexport {CopyButton} from './copy.class';\nexport {PrintButton} from './print.class';\nexport {VKontakteButton} from './vk.class';\n\nexport const /** @type {?} */ Buttons = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    icon: 'fa fa-facebook',\n    color: '#3b5998',\n    supportCount: true,\n    shareUrl: 'https://www.facebook.com/sharer/sharer.php?u=',\n    androidUrl: 'com.facebook.katana',\n    iosUrl: 'fb://',\n    countUrl: 'https://graph.facebook.com?id='\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    icon: 'fa fa-twitter',\n    color: '#00acee',\n    supportCount: false,\n    shareUrl: 'https://twitter.com/intent/tweet?url=',\n    androidUrl: 'com.twitter.package',\n    iosUrl: 'twitter://tweet?url='\n  },\n  google: {\n    type: 'google',\n    text: 'Google+',\n    icon: 'fa fa-google-plus',\n    color: '#DB4437',\n    supportCount: false,\n    shareUrl: 'https://plus.google.com/share?url=',\n    androidUrl: '',\n    iosUrl: '',\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    icon: 'fa fa-linkedin',\n    color: '#006fa6',\n    supportCount: true,\n    shareUrl: 'http://www.linkedin.com/shareArticle?url=',\n    androidUrl: 'com.linkedin.android',\n    iosUrl: 'linkedin://',\n    countUrl: 'https://www.linkedin.com/countserv/count/share?url='\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    icon: 'fa fa-pinterest-p',\n    color: '#BD091D',\n    supportCount: true,\n    shareUrl: 'https://in.pinterest.com/pin/create/button/?url=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://api.pinterest.com/v1/urls/count.json?callback=receiveCount&url='\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    icon: 'fa fa-reddit-alien',\n    color: '#FF4006',\n    supportCount: true,\n    shareUrl: 'http://www.reddit.com/submit?url=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://buttons.reddit.com/button_info.json?url='\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    icon: 'fa fa-tumblr',\n    color: '#36465D',\n    supportCount: true,\n    shareUrl: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://api.tumblr.com/v2/share/stats?url='\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    icon: 'fa fa-print',\n    color: 'brown',\n    supportCount: false\n  },\n  stumble: {\n    type: 'stumble',\n    text: 'Stumble',\n    icon: 'fa fa-stumbleupon',\n    color: '#eb4924',\n    supportCount: false,\n    shareUrl: 'http://www.stumbleupon.com/submit?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    icon: 'fa fa-send',\n    color: '#0088cc',\n    supportCount: false,\n    shareUrl: 'https://t.me/share/url?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    icon: 'fa fa-vk',\n    color: '#4C75A3',\n    supportCount: false,\n    shareUrl: 'http://vk.com/share.php?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    successText: 'Copied',\n    successIcon: 'fa fa-check',\n    failText: 'Error',\n    failIcon: 'fa fa-exclamation',\n    icon: 'fa fa-link',\n    color: '#607D8B',\n    supportCount: false\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    icon: 'fa fa-whatsapp',\n    color: '#25D366',\n    supportCount: false,\n    shareUrl: 'https://web.whatsapp.com/send?text=',\n    androidUrl: 'com.whatsapp.package',\n    iosUrl: 'whatsapp://?text='\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    icon: 'fa fa-envelope',\n    color: '#32A1A3',\n    supportCount: false,\n    shareUrl: 'mailto:?'\n  }\n};\n","import { InjectionToken } from '@angular/core';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\n\nexport const /** @type {?} */ OPTIONS = new InjectionToken<ShareButtonsOptions>('OPTIONS');\nexport const /** @type {?} */ BUTTONS_META = new InjectionToken<ShareButtonsMeta>('BUTTONS_META');\n","import { Injectable } from '@angular/core';\n\ndeclare const global: any;\ndeclare const window: any;\nexport class UniversalSupportService {\n/**\n * @return {?}\n */\nget nativeWindow() {\n        try {\n            return window;\n        } catch ( /** @type {?} */e) {\n          return global;\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniversalSupportService_tsickle_Closure_declarations() {\n/** @type {?} */\nUniversalSupportService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniversalSupportService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  ElementRef,\n  Renderer2,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { IShareButton } from '../models/share-buttons.models';\nimport { UniversalSupportService } from '../services/universal-support.service';\n\n/** Google analytics ref */\ndeclare const ga: Function;\nexport class ShareButtonDirective {\n/**\n * Window ref that supports Universal\n */\nwindow: Window;\n/**\n * Element ref\n */\nel: HTMLElement;\n/**\n * Share button type\n */\nshareButton: IShareButton;\n/**\n * Validated share URL\n */\nurl: string;\n/**\n * Share meta tags\n */\nsbTitle = this.share.title;\n   sbDescription = this.share.description;\n   sbImage = this.share.image;\n   sbTags = this.share.tags;\n/**\n * Set button class, e.g. 'sb-facebook'\n */\nbuttonClass: string;\n/**\n * Set share button e.g facebook, twitter...etc\n * @param {?} buttonName\n * @return {?}\n */\nset createButton(buttonName: string) {\n/**\n * Create a new button of type <buttonName>\n */\nconst button = this.share.createShareButton(buttonName);\n\n    if (button) {\n      this.shareButton = button;\n\n      /** Remove old button class in case user changed the button */\n      this.renderer.removeClass(this.el, 'sb-' + this.buttonClass);\n\n      /** Add new button class e.g.: sb-facebook, sb-twitter ...etc */\n      this.renderer.addClass(this.el, 'sb-' + button.prop.type);\n\n      /** Keep a copy of current class */\n      this.buttonClass = button.prop.type;\n\n      /** Get link's shared count */\n      this.getCount();\n    } else {\n      throw new Error(`[ShareButtons]: The share button \"${buttonName}\" does not exist. Make sure the button name is correct!`);\n    }\n  }\n/**\n * Set share URL\n * @param {?} url\n * @return {?}\n */\nset sbUrl(url: string) {\n\n    /** Check if current URL equals previous URL */\n    if (url !== this.url) {\n      this.url = this.validateUrl(url);\n      this.getCount();\n    }\n  }\n/**\n * Google analytics tracking\n */\ngaTracking = this.share.gaTracking;\n/**\n * Share count event\n */\nsbCount = new EventEmitter<number>();\n/**\n * Share dialog opened event\n */\nsbOpened = new EventEmitter<string>();\n/**\n * Share dialog closed event\n */\nsbClosed = new EventEmitter<string>();\n/**\n * @param {?} share\n * @param {?} renderer\n * @param {?} cd\n * @param {?} el\n * @param {?} universal\n */\nconstructor(private share: ShareButtonsService,\npublic renderer: Renderer2,\npublic cd: ChangeDetectorRef,\n    el: ElementRef,\n    universal: UniversalSupportService) {\n    this.el = el.nativeElement;\n    this.window = universal.nativeWindow;\n  }\n/**\n * Open share dialog\n * @return {?}\n */\nonClick() {\n    /** Set user did not set the url using [sbUrl], use window URL */\n    if (!this.url) {\n      this.url = encodeURIComponent(this.window.location.href);\n    }\n/**\n * Get sharing link\n */\nconst shareUrl = this.shareButton.link(this.url, {\n      title: this.sbTitle,\n      description: this.sbDescription,\n      image: this.sbImage,\n      tags: this.sbTags,\n      mobile: this.share.getMobileOS(),\n      via: this.share.twitterAccount,\n      directive: this\n    });\n\n    /** GA tracking */\n    if (this.gaTracking && typeof ga !== 'undefined') {\n      ga('send', 'social', this.shareButton.prop.type, 'click', this.url);\n    }\n\n    let /** @type {?} */ popUp;\n    if (shareUrl) {\n      /** Open share dialog */\n      popUp = this.window.open(shareUrl, 'newwindow', this.share.dialogSize);\n    }\n\n    /** Emit opened dialog type */\n    this.sbOpened.emit(this.shareButton.prop.type);\n\n    /** If dialog closed event has subscribers, emit closed dialog type */\n    if (this.sbClosed.observers.length && popUp) {\n      const /** @type {?} */ pollTimer = this.window.setInterval(() => {\n        if (popUp.closed) {\n          this.window.clearInterval(pollTimer);\n          this.sbClosed.emit(this.shareButton.prop.type);\n        }\n      }, 200);\n    }\n\n  }\n/**\n * @return {?}\n */\ngetCount() {\n    /** Only if share count has observers & the button has support for share count */\n    if (this.url && this.sbCount.observers.length && this.shareButton.prop.supportCount) {\n\n      /** Emit share count to (sbCount) Output */\n      this.shareButton.count(this.url).subscribe((count: number) => this.sbCount.emit(count));\n    }\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nvalidateUrl(url: string) {\n    /** Use encodeURIComponent to let URLs with the hash location strategy to work in tweets */\n\n    if (url) {\n      const /** @type {?} */ r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n      if (r.test(url)) {\n        return encodeURIComponent(url);\n      }\n      console.warn(`[ShareButtons]: The share URL \"${url}\" is invalid!`);\n    }\n    /** fallback to current page URL */\n    return encodeURIComponent(this.window.location.href);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[shareButton]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ShareButtonsService, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: UniversalSupportService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'sbTitle': [{ type: Input },],\n'sbDescription': [{ type: Input },],\n'sbImage': [{ type: Input },],\n'sbTags': [{ type: Input },],\n'createButton': [{ type: Input, args: ['shareButton', ] },],\n'sbUrl': [{ type: Input },],\n'gaTracking': [{ type: Input },],\n'sbCount': [{ type: Output },],\n'sbOpened': [{ type: Output },],\n'sbClosed': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\nfunction ShareButtonDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonDirective.ctorParameters;\n/** @type {?} */\nShareButtonDirective.propDecorators;\n/**\n * Window ref that supports Universal\n * @type {?}\n */\nShareButtonDirective.prototype.window;\n/**\n * Element ref\n * @type {?}\n */\nShareButtonDirective.prototype.el;\n/**\n * Share button type\n * @type {?}\n */\nShareButtonDirective.prototype.shareButton;\n/**\n * Validated share URL\n * @type {?}\n */\nShareButtonDirective.prototype.url;\n/**\n * Share meta tags\n * @type {?}\n */\nShareButtonDirective.prototype.sbTitle;\n/** @type {?} */\nShareButtonDirective.prototype.sbDescription;\n/** @type {?} */\nShareButtonDirective.prototype.sbImage;\n/** @type {?} */\nShareButtonDirective.prototype.sbTags;\n/**\n * Set button class, e.g. 'sb-facebook'\n * @type {?}\n */\nShareButtonDirective.prototype.buttonClass;\n/**\n * Google analytics tracking\n * @type {?}\n */\nShareButtonDirective.prototype.gaTracking;\n/**\n * Share count event\n * @type {?}\n */\nShareButtonDirective.prototype.sbCount;\n/**\n * Share dialog opened event\n * @type {?}\n */\nShareButtonDirective.prototype.sbOpened;\n/**\n * Share dialog closed event\n * @type {?}\n */\nShareButtonDirective.prototype.sbClosed;\n/** @type {?} */\nShareButtonDirective.prototype.share;\n/** @type {?} */\nShareButtonDirective.prototype.renderer;\n/** @type {?} */\nShareButtonDirective.prototype.cd;\n}\n\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nexport class NFormatterPipe implements PipeTransform {\n/**\n * @param {?} num\n * @param {?=} digits\n * @return {?}\n */\ntransform(num: any, digits?: any): any {\n\n    if (typeof num !== 'number') {\n      num = 1;\n    }\n\n    return nFormatter(num, digits);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'nFormatter'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NFormatterPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nNFormatterPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNFormatterPipe.ctorParameters;\n}\n\n/**\n * Change share counts to a readable number e.g 35.6k\n */\nexport const nFormatter = (num: number, digits: number) => {\n\n  const si = [\n    {value: 1E18, symbol: 'E'},\n    {value: 1E15, symbol: 'P'},\n    {value: 1E12, symbol: 'T'},\n    {value: 1E9, symbol: 'G'},\n    {value: 1E6, symbol: 'M'},\n    {value: 1E3, symbol: 'K'}\n  ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n\n  for (let i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n    }\n  }\n  return num.toFixed(digits).replace(rx, '$1');\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  ViewChild,\n  ChangeDetectorRef,\n  ElementRef,\n  HostBinding\n} from '@angular/core';\n\nimport { ShareButtonDirective } from '../../directives/share-button.directive';\nimport { ShareButtonsService } from '../../services/share-buttons.service';\nexport class ShareButtonComponent implements OnDestroy {\n/**\n * Share URL\n */\nurl: string;\n/**\n * Share count value\n */\nshareCount: number;\n/**\n * Button name e.g. fb, twitter, reddit...etc\n */\nbutton: string;\n/**\n * @param {?} button\n * @return {?}\n */\nset createButton(button: string) {\n    this.shareCount = 0;\n    this.button = button;\n  }\n/**\n * on set share URL\n * @param {?} newUrl\n * @return {?}\n */\nset setUrl(newUrl: string) {\n    /** Reset share count when url changes */\n    this.shareCount = 0;\n    this.url = newUrl;\n  }\n/**\n * Share meta tags\n */\ntitle: string;\n   description: string;\n   image: string;\n   tags: string;\n/**\n * Show button icon\n */\nshowIcon = true;\n/**\n * Show button name\n */\nshowName = false;\n/**\n * Button size\n */\nsize = this.share.size;\n/**\n * Get and display share count\n */\nshowCount = false;\n/**\n * @param {?} show\n * @return {?}\n */\nset setShowCount(show: boolean) {\n    this.showCount = show;\n    /** Subscribe to count event */\n\n    /** Check if sbCount has observers already, don't subscribe again */\n    if (!this.shareDirective.sbCount.observers.length) {\n\n      /** Subscribe to the directive count's event only if 'show' is true or 'sbCount' has observers */\n      if (this.showCount || this.count.observers.length) {\n        this.shareDirective.sbCount.subscribe(count => {\n          this.shareCount = count;\n          this.count.emit(count);\n          this.cd.markForCheck();\n        });\n      }\n\n    }\n\n  }\n/**\n * Button theme\n * @param {?} theme\n * @return {?}\n */\nset setTheme(theme: string) {\n    this.buttonClass = 'sb-button sb-' + theme;\n  }\n/**\n * Set theme as button class\n */\nbuttonClass = 'sb-button sb-' + this.share.theme;\n/**\n * Share count event\n */\ncount = new EventEmitter<number>();\n/**\n * Share dialog opened event\n */\nopened = new EventEmitter<string>();\n/**\n * Share dialog closed event\n */\nclosed = new EventEmitter<string>();\n/**\n * Share directive ref\n */\nshareDirective: ShareButtonDirective;\n/**\n * <ng-content> wrapper, used to add class e.g. sb-default, sb-text, sb-count\n */\ntemplate: ElementRef;\n/**\n * @param {?} cd\n * @param {?} share\n */\nconstructor(private cd: ChangeDetectorRef,\nprivate share: ShareButtonsService) {\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.shareDirective.sbCount.complete();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'share-button',\n  template: `\n    <button class=\"sb-wrapper\"\n            [shareButton]=\"button\"\n            [sbUrl]=\"url\"\n            [sbImage]=\"image\"\n            [sbTitle]=\"title\"\n            [sbDescription]=\"description\"\n            [sbTags]=\"tags\"\n            (sbOpened)=\"opened.emit($event)\"\n            (sbClosed)=\"closed.emit($event)\"\n            [class.sb-show-count]=\"showCount && shareCount\"\n            [class.sb-show-template]=\"template.innerText?.length\"\n            [class.sb-show-text]=\"showName && !template.childElementCount\"\n            [class.sb-show-icon]=\"showIcon && !template.childElementCount\"\n            [style.fontSize.px]=\"(1 + size/20) * 14\">\n\n      <div class=\"sb-inner\">\n\n        <!-- HIDE BUTTON'S ICON AND TEXT IF CUSTOM TEMPLATE IS USED -->\n\n        <div class=\"sb-content\" *ngIf=\"!template.childElementCount\">\n\n          <!-- BUTTON ICON -->\n          <div *ngIf=\"showIcon\" class=\"sb-icon\">\n            <i [class]=\"shareDirective.shareButton.prop.icon\" aria-hidden=\"true\"></i>\n          </div>\n\n          <!-- BUTTON TEXT -->\n          <div *ngIf=\"showName\" class=\"sb-text\">\n            {{ shareDirective.shareButton.prop.text }}\n          </div>\n\n        </div>\n\n        <!-- FOR CUSTOM TEMPLATE -->\n        <div #template class=\"sb-template\">\n          <ng-content></ng-content>\n        </div>\n\n        <!-- BUTTON COUNT -->\n        <div *ngIf=\"showCount && shareCount\" class=\"sb-count\">\n          <span>{{ shareCount | nFormatter }}</span>\n        </div>\n\n      </div>\n    </button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ShareButtonsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'createButton': [{ type: Input, args: ['button', ] },],\n'setUrl': [{ type: Input, args: ['url', ] },],\n'title': [{ type: Input },],\n'description': [{ type: Input },],\n'image': [{ type: Input },],\n'tags': [{ type: Input },],\n'showIcon': [{ type: Input },],\n'showName': [{ type: Input },],\n'size': [{ type: Input },],\n'setShowCount': [{ type: Input, args: ['showCount', ] },],\n'setTheme': [{ type: Input, args: ['theme', ] },],\n'buttonClass': [{ type: HostBinding, args: ['class', ] },],\n'count': [{ type: Output },],\n'opened': [{ type: Output },],\n'closed': [{ type: Output },],\n'shareDirective': [{ type: ViewChild, args: [ShareButtonDirective, ] },],\n'template': [{ type: ViewChild, args: ['template', ] },],\n};\n}\n\nfunction ShareButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonComponent.ctorParameters;\n/** @type {?} */\nShareButtonComponent.propDecorators;\n/**\n * Share URL\n * @type {?}\n */\nShareButtonComponent.prototype.url;\n/**\n * Share count value\n * @type {?}\n */\nShareButtonComponent.prototype.shareCount;\n/**\n * Button name e.g. fb, twitter, reddit...etc\n * @type {?}\n */\nShareButtonComponent.prototype.button;\n/**\n * Share meta tags\n * @type {?}\n */\nShareButtonComponent.prototype.title;\n/** @type {?} */\nShareButtonComponent.prototype.description;\n/** @type {?} */\nShareButtonComponent.prototype.image;\n/** @type {?} */\nShareButtonComponent.prototype.tags;\n/**\n * Show button icon\n * @type {?}\n */\nShareButtonComponent.prototype.showIcon;\n/**\n * Show button name\n * @type {?}\n */\nShareButtonComponent.prototype.showName;\n/**\n * Button size\n * @type {?}\n */\nShareButtonComponent.prototype.size;\n/**\n * Get and display share count\n * @type {?}\n */\nShareButtonComponent.prototype.showCount;\n/**\n * Set theme as button class\n * @type {?}\n */\nShareButtonComponent.prototype.buttonClass;\n/**\n * Share count event\n * @type {?}\n */\nShareButtonComponent.prototype.count;\n/**\n * Share dialog opened event\n * @type {?}\n */\nShareButtonComponent.prototype.opened;\n/**\n * Share dialog closed event\n * @type {?}\n */\nShareButtonComponent.prototype.closed;\n/**\n * Share directive ref\n * @type {?}\n */\nShareButtonComponent.prototype.shareDirective;\n/**\n * <ng-content> wrapper, used to add class e.g. sb-default, sb-text, sb-count\n * @type {?}\n */\nShareButtonComponent.prototype.template;\n/** @type {?} */\nShareButtonComponent.prototype.cd;\n/** @type {?} */\nShareButtonComponent.prototype.share;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  ChangeDetectorRef,\n  QueryList,\n  ViewChildren,\n  OnInit,\n  HostBinding\n} from '@angular/core';\nimport { ShareButtonsService } from '../../services/share-buttons.service';\nimport { ShareButtonComponent } from '../share-button/share-button.component';\nexport class ShareButtonsComponent implements OnInit, OnDestroy {\n/**\n * Share URL\n */\nurl: string;\n/**\n * Share count value\n */\nshareCount: number;\n/**\n * Share Buttons array\n */\nbuttons: string[] = [];\n/**\n * Buttons to include\n */\nincludeButtons: string[] = this.share.buttons;\n/**\n * Buttons to exclude\n */\nexcludeButtons: string[] = [];\n/**\n * @param {?} includeButtons\n * @return {?}\n */\nset include(includeButtons: string[]) {\n    this.includeButtons = includeButtons;\n    this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n  }\n/**\n * @param {?} excludeButtons\n * @return {?}\n */\nset exclude(excludeButtons: string[]) {\n    this.excludeButtons = excludeButtons;\n    this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n  }\n/**\n * Number of shown buttons\n */\nshownButtons = this.includeButtons.length;\n/**\n * Number of included buttons\n */\ntotalButtons;\n/**\n * Disable more/less buttons\n */\nshowAll = false;\n/**\n * @param {?} shownCount\n * @return {?}\n */\nset setShownButtons(shownCount: number) {\n    this.shownButtons = shownCount;\n    this.totalButtons = this.buttons.length;\n    /** Set showAll to true if shown buttons count = selected buttons count */\n    this.showAll = this.shownButtons === this.totalButtons + 1;\n  }\n/**\n * Set share URL\n * @param {?} newUrl\n * @return {?}\n */\nset setUrl(newUrl: string) {\n    /** Reset share count on url changes */\n    this.shareCount = 0;\n    this.url = newUrl;\n  }\n/**\n * Share meta tags\n */\ntitle: string;\n   description: string;\n   image: string;\n   tags: string;\n/**\n * Show button icon\n */\nshowIcon = true;\n/**\n * Show button name\n */\nshowName = false;\n/**\n * Button size\n */\nsize: number;\n/**\n * Get and display share count\n */\nshowCount = false;\n/**\n * @param {?} show\n * @return {?}\n */\nset setShowCount(show: boolean) {\n    this.showCount = show;\n\n    if (this.shareComponents) {\n      /** Subscribe to count event */\n      this.shareComponents.forEach((shareComponent: ShareButtonComponent) => {\n\n        /** Check if sbCount has observers already, don't subscribe again */\n        if (!shareComponent.count.observers.length) {\n\n          /** Subscribe to the component count event (only if [showCount]=true) */\n          if (show || this.count.observers.length) {\n            shareComponent.count.subscribe(count => {\n              this.shareCount = count;\n              this.count.emit(count);\n              this.cd.markForCheck();\n            });\n          }\n        }\n      });\n    }\n  }\n/**\n * Buttons theme\n */\ntheme;\n/**\n * @param {?} theme\n * @return {?}\n */\nset setTheme(theme: string) {\n    /** Set buttons' theme to override the default theme */\n    this.theme = theme;\n    /** Set buttons' container theme */\n    this.containerClass = 'sb-group sb-' + theme;\n  }\n/**\n * Set theme as buttons' container class\n */\ncontainerClass = 'sb-group sb-' + this.share.theme;\n/**\n * Share count event\n */\ncount = new EventEmitter<number>();\n/**\n * Share dialog opened event\n */\nopened = new EventEmitter<string>();\n/**\n * Share dialog closed event\n */\nclosed = new EventEmitter<string>();\n/**\n * Share components ref\n */\nshareComponents: QueryList<ShareButtonComponent>;\n/**\n * @param {?} cd\n * @param {?} share\n */\nconstructor(private cd: ChangeDetectorRef,\npublic share: ShareButtonsService) {\n\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    /**  if use didn't select the buttons use all */\n    if (!this.excludeButtons.length) {\n      this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.shareComponents.forEach((shareComponent: ShareButtonComponent) => {\n      shareComponent.count.unsubscribe();\n    });\n  }\n/**\n * @return {?}\n */\nmore() {\n    this.totalButtons = this.shownButtons;\n    this.shownButtons = this.buttons.length;\n    this.showAll = true;\n  }\n/**\n * @return {?}\n */\nless() {\n    this.shownButtons = this.totalButtons;\n    this.showAll = false;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'share-buttons',\n  template: `\n    <share-button *ngFor=\"let button of buttons | slice: 0:shownButtons\" \n      [button]=\"button\" \n      [theme]=\"theme\"\n      [url]=\"url\"\n      [title]=\"title\"\n      [description]=\"description\" \n      [image]=\"image\" \n      [tags]=\"tags\" \n      [showCount]=\"showCount\" \n      [showIcon]=\"showIcon\" \n      [showName]=\"showName\"\n      [size]=\"size\" \n      (opened)=\"opened.emit($event)\" \n      (closed)=\"closed.emit($event)\"></share-button>\n\n    <div [class]=\"'sb-button sb-' + theme\" \n      [style.fontSize.px]=\"(1 + size/20) * 14\">\n\n      <!-- SHOW LESS BUTTON -->\n\n      <button *ngIf=\"showAll && shownButtons === buttons.length\" \n              class=\"sb-wrapper sb-more sb-show-icon\" (click)=\"less()\">\n\n        <div class=\"sb-inner\">\n          <div class=\"sb-content\">\n            <div class=\"sb-icon\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></div>\n          </div>\n        </div>\n      </button>\n\n      <!-- SHOW MORE BUTTON -->\n\n        <button *ngIf=\"!showAll && shownButtons < buttons.length\"\n                class=\"sb-wrapper sb-more sb-show-icon\" (click)=\"more()\">\n      \n          <div class=\"sb-inner\">\n            <div class=\"sb-content\">\n              <div class=\"sb-icon\"><i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i></div>\n            </div>\n          </div>\n        </button>\n\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ShareButtonsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'include': [{ type: Input, args: ['include', ] },],\n'exclude': [{ type: Input, args: ['exclude', ] },],\n'setShownButtons': [{ type: Input, args: ['show', ] },],\n'setUrl': [{ type: Input, args: ['url', ] },],\n'title': [{ type: Input },],\n'description': [{ type: Input },],\n'image': [{ type: Input },],\n'tags': [{ type: Input },],\n'showIcon': [{ type: Input },],\n'showName': [{ type: Input },],\n'size': [{ type: Input },],\n'setShowCount': [{ type: Input, args: ['showCount', ] },],\n'setTheme': [{ type: Input, args: ['theme', ] },],\n'containerClass': [{ type: HostBinding, args: ['class', ] },],\n'count': [{ type: Output },],\n'opened': [{ type: Output },],\n'closed': [{ type: Output },],\n'shareComponents': [{ type: ViewChildren, args: [ShareButtonComponent, ] },],\n};\n}\n\nfunction ShareButtonsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonsComponent.ctorParameters;\n/** @type {?} */\nShareButtonsComponent.propDecorators;\n/**\n * Share URL\n * @type {?}\n */\nShareButtonsComponent.prototype.url;\n/**\n * Share count value\n * @type {?}\n */\nShareButtonsComponent.prototype.shareCount;\n/**\n * Share Buttons array\n * @type {?}\n */\nShareButtonsComponent.prototype.buttons;\n/**\n * Buttons to include\n * @type {?}\n */\nShareButtonsComponent.prototype.includeButtons;\n/**\n * Buttons to exclude\n * @type {?}\n */\nShareButtonsComponent.prototype.excludeButtons;\n/**\n * Number of shown buttons\n * @type {?}\n */\nShareButtonsComponent.prototype.shownButtons;\n/**\n * Number of included buttons\n * @type {?}\n */\nShareButtonsComponent.prototype.totalButtons;\n/**\n * Disable more/less buttons\n * @type {?}\n */\nShareButtonsComponent.prototype.showAll;\n/**\n * Share meta tags\n * @type {?}\n */\nShareButtonsComponent.prototype.title;\n/** @type {?} */\nShareButtonsComponent.prototype.description;\n/** @type {?} */\nShareButtonsComponent.prototype.image;\n/** @type {?} */\nShareButtonsComponent.prototype.tags;\n/**\n * Show button icon\n * @type {?}\n */\nShareButtonsComponent.prototype.showIcon;\n/**\n * Show button name\n * @type {?}\n */\nShareButtonsComponent.prototype.showName;\n/**\n * Button size\n * @type {?}\n */\nShareButtonsComponent.prototype.size;\n/**\n * Get and display share count\n * @type {?}\n */\nShareButtonsComponent.prototype.showCount;\n/**\n * Buttons theme\n * @type {?}\n */\nShareButtonsComponent.prototype.theme;\n/**\n * Set theme as buttons' container class\n * @type {?}\n */\nShareButtonsComponent.prototype.containerClass;\n/**\n * Share count event\n * @type {?}\n */\nShareButtonsComponent.prototype.count;\n/**\n * Share dialog opened event\n * @type {?}\n */\nShareButtonsComponent.prototype.opened;\n/**\n * Share dialog closed event\n * @type {?}\n */\nShareButtonsComponent.prototype.closed;\n/**\n * Share components ref\n * @type {?}\n */\nShareButtonsComponent.prototype.shareComponents;\n/** @type {?} */\nShareButtonsComponent.prototype.cd;\n/** @type {?} */\nShareButtonsComponent.prototype.share;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["item","Array","isArray","target","_i","sources","length","source","shift","isObject","key","Object","assign","_a","mergeDeep","_b","httpClient","options","buttonsMeta","ShareButtonsService","prop","http","this","FacebookButton","url","args","shareUrl","title","get","countUrl","filter","res","share","share_count","map","catch","err","Observable","empty","TwitterButton","description","via","tags","LinkedinButton","jsonp","count","TumblrButton","response","note_count","WhatsappButton","PinterestButton","document","ogDescription","querySelector","getAttribute","console","warn","image","ogImage","responseType","text","JSON","parse","replace","RedditButton","data","children","score","GoogleButton","StumbleButton","TelegramButton","EmailButton","email","CopyButton","copyURLToClipboard","directive","temp","shareButton","icon","of","take","do","decodeURIComponent","textArea","renderer","createElement","setStyle","setProperty","appendChild","el","select","execCommand","removeChild","_this","successText","successIcon","cd","markForCheck","failText","failIcon","delay","subscribe","PrintButton","window","print","VKontakteButton","Buttons","facebook","type","color","supportCount","androidUrl","iosUrl","twitter","google","linkedin","pinterest","reddit","tumblr","stumble","telegram","vk","copy","whatsapp","OPTIONS","InjectionToken","BUTTONS_META","meta","theme","dialogWidth","dialogHeight","include","allButtons","exclude","size","gaTracking","twitterAccount","btn","indexOf","buttonName","toLowerCase","Injectable","HttpClient","undefined","decorators","Inject","UniversalSupportService","e","global","universal","EventEmitter","nativeElement","nativeWindow","ShareButtonDirective","button","createShareButton","Error","removeClass","buttonClass","addClass","getCount","validateUrl","encodeURIComponent","location","href","link","sbTitle","sbDescription","sbImage","sbTags","mobile","getMobileOS","ga","popUp","open","dialogSize","sbOpened","emit","sbClosed","observers","pollTimer_1","setInterval","closed","clearInterval","sbCount","test","Directive","selector","Renderer2","ChangeDetectorRef","ElementRef","Input","createButton","sbUrl","Output","onClick","HostListener","NFormatterPipe","num","digits","nFormatter","Pipe","name","si","value","symbol","rx","i","toFixed","ShareDirectiveModule","ngModule","providers","provide","useValue","useFactory","ShareButtonsFactory","deps","NgModule","declarations","imports","CommonModule","exports","ShareButtonComponent","shareCount","newUrl","show","showCount","shareDirective","complete","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","setUrl","showIcon","showName","setShowCount","setTheme","HostBinding","opened","ViewChild","ShareButtonModule","buttons","includeButtons","ShareButtonsComponent","excludeButtons","shownCount","shownButtons","totalButtons","showAll","shareComponents","forEach","shareComponent","containerClass","unsubscribe","setShownButtons","ViewChildren","ShareButtonsModule"],"mappings":"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"}